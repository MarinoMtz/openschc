     1
     2
     3
     4
     5	lpwan Working Group					     A. Minaburo
     6	Internet-Draft							  Acklio
     7	Intended status: Standards Track			      L. Toutain
     8	Expires: June 7, 2020					  IMT-Atlantique
     9									C. Gomez
    10					    Universitat Politecnica de Catalunya
    11								      D. Barthel
    12								     Orange Labs
    13								      JC. Zuniga
    14									  SIGFOX
    15							       December 05, 2019
    16
    17
    18	 Static Context Header Compression (SCHC) and fragmentation for LPWAN,
    19				application to UDP/IPv6
    20		       draft-ietf-lpwan-ipv6-static-context-hc-24
    21
    22	Abstract
    23
    24	   This document defines the Static Context Header Compression (SCHC)
    25	   framework, which provides both a header compression mechanism and an
    26	   optional fragmentation mechanism.  SCHC has been designed for Low
    27	   Power Wide Area Networks (LPWAN).
    28
    29	   SCHC compression is based on a common static context stored both in
    30	   the LPWAN device and in the network infrastructure side.  This
    31	   document defines a generic header compression mechanism and its
    32	   application to compress IPv6/UDP headers.
    33
    34	   This document also specifies an optional fragmentation and reassembly
    35	   mechanism.  It can be used to support the IPv6 MTU requirement over
    36	   the LPWAN technologies.  Fragmentation is needed for IPv6 datagrams
    37	   that, after SCHC compression or when such compression was not
    38	   possible, still exceed the layer-2 maximum payload size.
    39
    40	   The SCHC header compression and fragmentation mechanisms are
    41	   independent of the specific LPWAN technology over which they are
    42	   used.  This document defines generic functionalities and offers
    43	   flexibility with regard to parameter settings and mechanism choices.
    44	   This document standardizes the exchange over the LPWAN between two
    45	   SCHC entities.  Settings and choices specific to a technology or a
    46	   product are expected to be grouped into profiles, which are specified
    47	   in other documents.	Data models for the context and profiles are out
    48	   of scope.
    49
    50
    51
    52
    53
    54
    55
    56	Minaburo, et al.	  Expires June 7, 2020			[Page 1]
    57
    58	Internet-Draft		       LPWAN SCHC		   December 2019
    59
    60
    61	Status of This Memo
    62
    63	   This Internet-Draft is submitted in full conformance with the
    64	   provisions of BCP 78 and BCP 79.
    65
    66	   Internet-Drafts are working documents of the Internet Engineering
    67	   Task Force (IETF).  Note that other groups may also distribute
    68	   working documents as Internet-Drafts.  The list of current Internet-
    69	   Drafts is at https://datatracker.ietf.org/drafts/current/.
    70
    71	   Internet-Drafts are draft documents valid for a maximum of six months
    72	   and may be updated, replaced, or obsoleted by other documents at any
    73	   time.  It is inappropriate to use Internet-Drafts as reference
    74	   material or to cite them other than as "work in progress."
    75
    76	   This Internet-Draft will expire on June 7, 2020.
    77
    78	Copyright Notice
    79
    80	   Copyright (c) 2019 IETF Trust and the persons identified as the
    81	   document authors.  All rights reserved.
    82
    83	   This document is subject to BCP 78 and the IETF Trust's Legal
    84	   Provisions Relating to IETF Documents
    85	   (https://trustee.ietf.org/license-info) in effect on the date of
    86	   publication of this document.  Please review these documents
    87	   carefully, as they describe your rights and restrictions with respect
    88	   to this document.  Code Components extracted from this document must
    89	   include Simplified BSD License text as described in Section 4.e of
    90	   the Trust Legal Provisions and are provided without warranty as
    91	   described in the Simplified BSD License.
    92
    93	Table of Contents
    94
    95	   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
    96	   2.  Requirements Notation . . . . . . . . . . . . . . . . . . . .   5
    97	   3.  LPWAN Architecture  . . . . . . . . . . . . . . . . . . . . .   5
    98	   4.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   6
    99	   5.  SCHC overview . . . . . . . . . . . . . . . . . . . . . . . .   8
   100	     5.1.  SCHC Packet format  . . . . . . . . . . . . . . . . . . .  10
   101	     5.2.  Functional mapping  . . . . . . . . . . . . . . . . . . .  11
   102	   6.  Rule ID . . . . . . . . . . . . . . . . . . . . . . . . . . .  12
   103	   7.  Compression/Decompression . . . . . . . . . . . . . . . . . .  12
   104	     7.1.  SCHC C/D Rules  . . . . . . . . . . . . . . . . . . . . .  13
   105	     7.2.  Rule ID for SCHC C/D  . . . . . . . . . . . . . . . . . .  15
   106	     7.3.  Packet processing . . . . . . . . . . . . . . . . . . . .  15
   107	     7.4.  Matching operators  . . . . . . . . . . . . . . . . . . .  17
   108	     7.5.  Compression Decompression Actions (CDA) . . . . . . . . .  18
   109
   110
   111
   112	Minaburo, et al.	  Expires June 7, 2020			[Page 2]
   113
   114	Internet-Draft		       LPWAN SCHC		   December 2019
   115
   116
   117	       7.5.1.  processing fixed-length fields  . . . . . . . . . . .  19
   118	       7.5.2.  processing variable-length fields . . . . . . . . . .  19
   119	       7.5.3.  not-sent CDA  . . . . . . . . . . . . . . . . . . . .  20
   120	       7.5.4.  value-sent CDA  . . . . . . . . . . . . . . . . . . .  20
   121	       7.5.5.  mapping-sent CDA  . . . . . . . . . . . . . . . . . .  20
   122	       7.5.6.  LSB CDA . . . . . . . . . . . . . . . . . . . . . . .  21
   123	       7.5.7.  DevIID, AppIID CDA  . . . . . . . . . . . . . . . . .  21
   124	       7.5.8.  Compute-* . . . . . . . . . . . . . . . . . . . . . .  21
   125	   8.  Fragmentation/Reassembly  . . . . . . . . . . . . . . . . . .  22
   126	     8.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .  22
   127	     8.2.  SCHC F/R Protocol Elements  . . . . . . . . . . . . . . .  22
   128	       8.2.1.  Messages  . . . . . . . . . . . . . . . . . . . . . .  22
   129	       8.2.2.  Tiles, Windows, Bitmaps, Timers, Counters . . . . . .  23
   130	       8.2.3.  Integrity Checking  . . . . . . . . . . . . . . . . .  25
   131	       8.2.4.  Header Fields . . . . . . . . . . . . . . . . . . . .  26
   132	     8.3.  SCHC F/R Message Formats  . . . . . . . . . . . . . . . .  28
   133	       8.3.1.  SCHC Fragment format  . . . . . . . . . . . . . . . .  28
   134	       8.3.2.  SCHC ACK format . . . . . . . . . . . . . . . . . . .  30
   135	       8.3.3.  SCHC ACK REQ format . . . . . . . . . . . . . . . . .  32
   136	       8.3.4.  SCHC Sender-Abort format  . . . . . . . . . . . . . .  33
   137	       8.3.5.  SCHC Receiver-Abort format  . . . . . . . . . . . . .  33
   138	     8.4.  SCHC F/R modes  . . . . . . . . . . . . . . . . . . . . .  34
   139	       8.4.1.  No-ACK mode . . . . . . . . . . . . . . . . . . . . .  34
   140	       8.4.2.  ACK-Always mode . . . . . . . . . . . . . . . . . . .  36
   141	       8.4.3.  ACK-on-Error mode . . . . . . . . . . . . . . . . . .  43
   142	   9.  Padding management  . . . . . . . . . . . . . . . . . . . . .  51
   143	   10. SCHC Compression for IPv6 and UDP headers . . . . . . . . . .  52
   144	     10.1.  IPv6 version field . . . . . . . . . . . . . . . . . . .  52
   145	     10.2.  IPv6 Traffic class field . . . . . . . . . . . . . . . .  52
   146	     10.3.  Flow label field . . . . . . . . . . . . . . . . . . . .  52
   147	     10.4.  Payload Length field . . . . . . . . . . . . . . . . . .  53
   148	     10.5.  Next Header field  . . . . . . . . . . . . . . . . . . .  53
   149	     10.6.  Hop Limit field  . . . . . . . . . . . . . . . . . . . .  53
   150	     10.7.  IPv6 addresses fields  . . . . . . . . . . . . . . . . .  53
   151	       10.7.1.	IPv6 source and destination prefixes . . . . . . . .  54
   152	       10.7.2.	IPv6 source and destination IID  . . . . . . . . . .  54
   153	     10.8.  IPv6 extension headers . . . . . . . . . . . . . . . . .  54
   154	     10.9.  UDP source and destination ports . . . . . . . . . . . .  55
   155	     10.10. UDP length field . . . . . . . . . . . . . . . . . . . .  55
   156	     10.11. UDP Checksum field . . . . . . . . . . . . . . . . . . .  55
   157	   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  56
   158	   12. Security considerations . . . . . . . . . . . . . . . . . . .  56
   159	     12.1.  Security considerations for SCHC
   160		    Compression/Decompression  . . . . . . . . . . . . . . .  56
   161	       12.1.1.	Forged SCHC Packet . . . . . . . . . . . . . . . . .  56
   162	       12.1.2.	Compressed packet size as a side channel to guess a
   163			secret token . . . . . . . . . . . . . . . . . . . .  57
   164	       12.1.3.	Decompressed packet different from the original
   165
   166
   167
   168	Minaburo, et al.	  Expires June 7, 2020			[Page 3]
   169
   170	Internet-Draft		       LPWAN SCHC		   December 2019
   171
   172
   173			packet . . . . . . . . . . . . . . . . . . . . . . .  58
   174	     12.2.  Security considerations for SCHC
   175		    Fragmentation/Reassembly . . . . . . . . . . . . . . . .  58
   176	       12.2.1.	Buffer reservation attack  . . . . . . . . . . . . .  58
   177	       12.2.2.	Corrupt Fragment attack  . . . . . . . . . . . . . .  59
   178	       12.2.3.	Fragmentation as a way to bypass Network Inspection   59
   179	       12.2.4.	Privacy issues associated with SCHC header fields  .  59
   180	   13. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  60
   181	   14. References  . . . . . . . . . . . . . . . . . . . . . . . . .  60
   182	     14.1.  Normative References . . . . . . . . . . . . . . . . . .  60
   183	     14.2.  Informative References . . . . . . . . . . . . . . . . .  61
   184	   Appendix A.	Compression Examples . . . . . . . . . . . . . . . .  61
   185	   Appendix B.	Fragmentation Examples . . . . . . . . . . . . . . .  64
   186	   Appendix C.	Fragmentation State Machines . . . . . . . . . . . .  72
   187	   Appendix D.	SCHC Parameters  . . . . . . . . . . . . . . . . . .  78
   188	   Appendix E.	Supporting multiple window sizes for fragmentation .  80
   189	   Appendix F.	ACK-Always and ACK-on-Error on quasi-bidirectional
   190			links  . . . . . . . . . . . . . . . . . . . . . . .  80
   191	   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  82
   192
   193	1.  Introduction
   194
   195	   This document defines the Static Context Header Compression (SCHC)
   196	   framework, which provides both a header compression mechanism and an
   197	   optional fragmentation mechanism.  SCHC has been designed for Low
   198	   Power Wide Area Networks (LPWAN).
   199
   200	   LPWAN technologies impose some strict limitations on traffic.  For
   201	   instance, devices sleep most of the time and may only receive data
   202	   during short periods of time after transmission, in order to preserve
   203	   battery.  LPWAN technologies are also characterized by a greatly
   204	   reduced data unit and/or payload size (see [RFC8376]).
   205
   206	   Header compression is needed for efficient Internet connectivity to a
   207	   node within an LPWAN network.  The following properties of LPWAN
   208	   networks can be exploited to get an efficient header compression:
   209
   210	   o  The network topology is star-oriented, which means that all
   211	      packets between the same source-destination pair follow the same
   212	      path.  For the needs of this document, the architecture can simply
   213	      be described as Devices (Dev) exchanging information with LPWAN
   214	      Application Servers (App) through a Network Gateway (NGW).
   215
   216	   o  Because devices embed built-in applications, the traffic flows to
   217	      be compressed are known in advance.  Indeed, new applications are
   218	      less frequently installed in an LPWAN device, than they are in a
   219	      general-purpose computer or smartphone.
   220
   221
   222
   223
   224	Minaburo, et al.	  Expires June 7, 2020			[Page 4]
   225
   226	Internet-Draft		       LPWAN SCHC		   December 2019
   227
   228
   229	   SCHC compression uses a Context (a set of Rules) in which information
   230	   about header fields is stored.  This Context is static: the values of
   231	   the header fields and the actions to do compression/decompression do
   232	   not change over time.  This avoids the need for complex
   233	   resynchronization mechanisms.  Indeed, a return path may be more
   234	   restricted/expensive, sometimes completely unavailable [RFC8376].  A
   235	   compression protocol that relies on feedback is not compatible with
   236	   the characteristics of such LPWANs.
   237
   238	   In most cases, a small Rule identifier is enough to represent the
   239	   full IPv6/UDP headers.  The SCHC header compression mechanism is
   240	   independent of the specific LPWAN technology over which it is used.
   241
   242	   Furthermore, some LPWAN technologies do not provide a fragmentation
   243	   functionality; to support the IPv6 MTU requirement of 1280 bytes
   244	   [RFC8200], they require a fragmentation protocol at the adaptation
   245	   layer below IPv6.  Accordingly, this document defines an optional
   246	   fragmentation/reassembly mechanism for LPWAN technologies to support
   247	   the IPv6 MTU requirement.
   248
   249	   This document defines generic functionality and offers flexibility
   250	   with regard to parameters settings and mechanism choices.
   251	   Technology-specific settings are expected to be grouped into Profiles
   252	   specified in other documents.
   253
   254	2.  Requirements Notation
   255
   256	   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   257	   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   258	   "OPTIONAL" in this document are to be interpreted as described in BCP
   259	   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   260	   capitals, as shown here.
   261
   262	3.  LPWAN Architecture
   263
   264	   LPWAN network architectures are similar among them, but each LPWAN
   265	   technology names architecture elements differently.	In this
   266	   document, we use terminology from [RFC8376], which identifies the
   267	   following entities in a typical LPWAN network (see Figure 1):
   268
   269	   o Devices (Dev) are the end-devices or hosts (e.g., sensors,
   270	   actuators, etc.).  There can be a very high density of devices per
   271	   radio gateway.
   272
   273	   o The Radio Gateway (RGW) is the end point of the constrained link.
   274
   275	   o The Network Gateway (NGW) is the interconnection node between the
   276	   Radio Gateway and the Internet.
   277
   278
   279
   280	Minaburo, et al.	  Expires June 7, 2020			[Page 5]
   281
   282	Internet-Draft		       LPWAN SCHC		   December 2019
   283
   284
   285	   o Application Server (App) is the end point of the application level
   286	   protocol on the Internet side.
   287
   288	    ()	 ()   ()       |
   289	     ()  () () ()     / \	+---------+
   290	   () () () () () () /	 \======|    ^	  |		+-----------+
   291	    ()	()   ()     |		| <--|--> |		|Application|
   292	   ()  ()  ()  ()  / \==========|    v	  |=============|   (App)   |
   293	     ()  ()  ()   /   \ 	+---------+		+-----------+
   294	    Dev 	   RGWs 	    NGW
   295
   296
   297	    Figure 1: LPWAN Architecture, simplified from that shown in RFC8376
   298
   299	4.  Terminology
   300
   301	   This section defines the terminology and acronyms used in this
   302	   document.  It extends the terminology of [RFC8376].
   303
   304	   The SCHC acronym is pronounced like "sheek" in English (or "chic" in
   305	   French).  Therefore, this document writes "a SCHC Packet" instead of
   306	   "an SCHC Packet".
   307
   308	   o  App: LPWAN Application, as defined by [RFC8376].	An application
   309	      sending/receiving packets to/from the Dev.
   310
   311	   o  AppIID: Application Interface Identifier.  The IID that identifies
   312	      the application server interface.
   313
   314	   o  Bi: Bidirectional.  Characterizes a Field Descriptor that applies
   315	      to headers of packets traveling in either direction (Up and Dw,
   316	      see this glossary).
   317
   318	   o  CDA: Compression/Decompression Action.  Describes the pair of
   319	      actions that are performed at the compressor to compress a header
   320	      field and at the decompressor to recover the original value of the
   321	      header field.
   322
   323	   o  Compression Residue.  The bits that remain to be sent (beyond the
   324	      Rule ID itself) after applying the SCHC compression.
   325
   326	   o  Context: A set of Rules used to compress/decompress headers.
   327
   328	   o  Dev: Device, as defined by [RFC8376].
   329
   330	   o  DevIID: Device Interface Identifier.  The IID that identifies the
   331	      Dev interface.
   332
   333
   334
   335
   336	Minaburo, et al.	  Expires June 7, 2020			[Page 6]
   337
   338	Internet-Draft		       LPWAN SCHC		   December 2019
   339
   340
   341	   o  DI: Direction Indicator.	This field tells which direction of
   342	      packet travel (Up, Dw or Bi) a Field Description applies to.  This
   343	      allows for asymmetric processing, using the same Rule.
   344
   345	   o  Dw: Downlink direction for compression/decompression, from SCHC C/
   346	      D in the network to SCHC C/D in the Dev.
   347
   348	   o  Field Description.  A tuple containing identifier, value, matching
   349	      operator and actions to be applied to a field.
   350
   351	   o  FID: Field Identifier.  This identifies the protocol and field a
   352	      Field Description applies to.
   353
   354	   o  FL: Field Length is the length of the original packet header
   355	      field.  It is expressed as a number of bits for header fields of
   356	      fixed lengths or as a type (e.g., variable, token length, ...) for
   357	      field lengths that are unknown at the time of Rule creation.  The
   358	      length of a header field is defined in the corresponding protocol
   359	      specification (such as IPv6 or UDP).
   360
   361	   o  FP: when a Field is expected to appear multiple times in a header,
   362	      Field Position specifies the occurrence this Field Description
   363	      applies to (for example, first uri-path option, second uri-path,
   364	      etc. in a CoAP header), counting from 1.	The value 0 is special
   365	      and means "don't care", see Section 7.3.
   366
   367	   o  IID: Interface Identifier.  See the IPv6 addressing architecture
   368	      [RFC7136].
   369
   370	   o  L2: Layer two.  The immediate lower layer SCHC interfaces with.
   371	      It is provided by an underlying LPWAN technology.  It does not
   372	      necessarily correspond to the OSI model definition of Layer 2.
   373
   374	   o  L2 Word: this is the minimum subdivision of payload data that the
   375	      L2 will carry.  In most L2 technologies, the L2 Word is an octet.
   376	      In bit-oriented radio technologies, the L2 Word might be a single
   377	      bit.  The L2 Word size is assumed to be constant over time for
   378	      each device.
   379
   380	   o  MO: Matching Operator.  An operator used to match a value
   381	      contained in a header field with a value contained in a Rule.
   382
   383	   o  Padding (P).  Extra bits that may be appended by SCHC to a data
   384	      unit that it passes to the underlying Layer 2 for transmission.
   385	      SCHC itself operates on bits, not bytes, and does not have any
   386	      alignment prerequisite.  See Section 9.
   387
   388
   389
   390
   391
   392	Minaburo, et al.	  Expires June 7, 2020			[Page 7]
   393
   394	Internet-Draft		       LPWAN SCHC		   December 2019
   395
   396
   397	   o  Profile: SCHC offers variations in the way it is operated, with a
   398	      number of parameters listed in Appendix D.  A Profile indicates a
   399	      particular setting of all these parameters.  Both ends of a SCHC
   400	      communication must be provisioned with the same Profile
   401	      information and with the same set of Rules before the
   402	      communication starts, so that there is no ambiguity in how they
   403	      expect to communicate.
   404
   405	   o  Rule: A set of Field Descriptions.
   406
   407	   o  Rule ID (Rule Identifier): An identifier for a Rule.  SCHC C/D on
   408	      both sides share the same Rule ID for a given packet.  A set of
   409	      Rule IDs are used to support SCHC F/R functionality.
   410
   411	   o  SCHC C/D: SCHC Compressor/Decompressor.  A mechanism used on both
   412	      sides, at the Dev and at the network, to achieve Compression/
   413	      Decompression of headers.
   414
   415	   o  SCHC F/R: SCHC Fragmentation / Reassembly.  A mechanism used on
   416	      both sides, at the Dev and at the network, to achieve
   417	      Fragmentation / Reassembly of SCHC Packets.
   418
   419	   o  SCHC Packet: A packet (e.g., an IPv6 packet) whose header has been
   420	      compressed as per the header compression mechanism defined in this
   421	      document.  If the header compression process is unable to actually
   422	      compress the packet header, the packet with the uncompressed
   423	      header is still called a SCHC Packet (in this case, a Rule ID is
   424	      used to indicate that the packet header has not been compressed).
   425	      See Section 7 for more details.
   426
   427	   o  TV: Target value.  A value contained in a Rule that will be
   428	      matched with the value of a header field.
   429
   430	   o  Up: Uplink direction for compression/decompression, from the Dev
   431	      SCHC C/D to the network SCHC C/D.
   432
   433	   Additional terminology for the optional SCHC Fragmentation /
   434	   Reassembly mechanism (SCHC F/R) is found in Section 8.2.
   435
   436	5.  SCHC overview
   437
   438	   SCHC can be characterized as an adaptation layer between an upper
   439	   layer (typically, IPv6) and an underlying layer (typically, an LPWAN
   440	   technology).  SCHC comprises two sublayers (i.e. the Compression
   441	   sublayer and the Fragmentation sublayer), as shown in Figure 2.
   442
   443
   444
   445
   446
   447
   448	Minaburo, et al.	  Expires June 7, 2020			[Page 8]
   449
   450	Internet-Draft		       LPWAN SCHC		   December 2019
   451
   452
   453			+----------------+
   454			|      IPv6	 |
   455		     +- +----------------+
   456		     |	|   Compression  |
   457	       SCHC <	+----------------+
   458		     |	|  Fragmentation |
   459		     +- +----------------+
   460			|LPWAN technology|
   461			+----------------+
   462
   463
   464		Figure 2: Protocol stack comprising IPv6, SCHC and an LPWAN
   465					technology
   466
   467	   Before an upper layer packet (e.g., an IPv6 packet) is transmitted to
   468	   the underlying layer, header compression is first attempted.  The
   469	   resulting packet is called a SCHC Packet, whether or not any
   470	   compression is performed.  If needed by the underlying layer, the
   471	   optional SCHC Fragmentation MAY be applied to the SCHC Packet.  The
   472	   inverse operations take place at the receiver.  This process is
   473	   illustrated in Figure 3.
   474
   475
   476
   477
   478
   479
   480
   481
   482
   483
   484
   485
   486
   487
   488
   489
   490
   491
   492
   493
   494
   495
   496
   497
   498
   499
   500
   501
   502
   503
   504	Minaburo, et al.	  Expires June 7, 2020			[Page 9]
   505
   506	Internet-Draft		       LPWAN SCHC		   December 2019
   507
   508
   509	  A packet (e.g., an IPv6 packet)
   510		   |					       ^
   511		   v					       |
   512	  +------------------+			    +--------------------+
   513	  | SCHC Compression |			    | SCHC Decompression |
   514	  +------------------+			    +--------------------+
   515		   |					       ^
   516		   |   If no fragmentation (*)		       |
   517		   +-------------- SCHC Packet	-------------->|
   518		   |					       |
   519		   v					       |
   520	  +--------------------+		       +-----------------+
   521	  | SCHC Fragmentation |		       | SCHC Reassembly |
   522	  +--------------------+		       +-----------------+
   523		|     ^ 				    |	  ^
   524		|     | 				    |	  |
   525		|     +---------- SCHC ACK (+) -------------+	  |
   526		|						  |
   527		+-------------- SCHC Fragments -------------------+
   528
   529		  Sender				    Receiver
   530
   531
   532	  *: the decision to not use SCHC Fragmentation is left to each Profile.
   533	  +: optional, depends on Fragmentation mode.
   534
   535
   536		 Figure 3: SCHC operations at the Sender and the Receiver
   537
   538	5.1.  SCHC Packet format
   539
   540	   The SCHC Packet is composed of the Compressed Header followed by the
   541	   payload from the original packet (see Figure 4).  The Compressed
   542	   Header itself is composed of the Rule ID and a Compression Residue,
   543	   which is the output of compressing the packet header with that Rule
   544	   (see Section 7).  The Compression Residue may be empty.  Both the
   545	   Rule ID and the Compression Residue potentially have a variable size,
   546	   and are not necessarily a multiple of bytes in size.
   547
   548	   |------- Compressed Header -------|
   549	   +---------------------------------+--------------------+
   550	   |  Rule ID |  Compression Residue |	    Payload	  |
   551	   +---------------------------------+--------------------+
   552
   553
   554				   Figure 4: SCHC Packet
   555
   556
   557
   558
   559
   560	Minaburo, et al.	  Expires June 7, 2020		       [Page 10]
   561
   562	Internet-Draft		       LPWAN SCHC		   December 2019
   563
   564
   565	5.2.  Functional mapping
   566
   567	   Figure 5 maps the functional elements of Figure 3 onto the LPWAN
   568	   architecture elements of Figure 1.
   569
   570		  Dev						    App
   571	  +----------------+				    +----+ +----+ +----+
   572	  | App1 App2 App3 |				    |App1| |App2| |App3|
   573	  |		   |				    |	 | |	| |    |
   574	  |	  UDP	   |				    |UDP | |UDP | |UDP |
   575	  |	 IPv6	   |				    |IPv6| |IPv6| |IPv6|
   576	  |		   |				    |	 | |	| |    |
   577	  |SCHC C/D and F/R|				    |	 | |	| |    |
   578	  +--------+-------+				    +----+ +----+ +----+
   579		   |  +---+	+---+	 +----+    +----+     .      .	    .
   580		   +~ |RGW| === |NGW| == |SCHC| == |SCHC|...... Internet ....
   581		      +---+	+---+	 |F/R |    |C/D |
   582					 +----+    +----+
   583
   584				  Figure 5: Architecture
   585
   586	   SCHC C/D and SCHC F/R are located on both sides of the LPWAN
   587	   transmission, hereafter called "the Dev side" and "the Network
   588	   infrastructure side".
   589
   590	   The operation in the Uplink direction is as follows.  The Device
   591	   application uses IPv6 or IPv6/UDP protocols.  Before sending the
   592	   packets, the Dev compresses their headers using SCHC C/D and, if the
   593	   SCHC Packet resulting from the compression needs to be fragmented by
   594	   SCHC, SCHC F/R is performed (see Section 8).  The resulting SCHC
   595	   Fragments are sent to an LPWAN Radio Gateway (RGW) which forwards
   596	   them to a Network Gateway (NGW).  The NGW sends the data to a SCHC F/
   597	   R for re-assembly (if needed) and then to the SCHC C/D for
   598	   decompression.  After decompression, the packet can be sent over the
   599	   Internet to one or several LPWAN Application Servers (App).
   600
   601	   The SCHC F/R and C/D on the Network infrastructure side can be part
   602	   of the NGW, or located in the Internet as long as a tunnel is
   603	   established between them and the NGW.  For some LPWAN technologies,
   604	   it may be suitable to locate the SCHC F/R functionality nearer the
   605	   NGW, in order to better deal with time constraints of such
   606	   technologies.
   607
   608	   The SCHC C/Ds on both sides MUST share the same set of Rules.  So
   609	   MUST the SCHC F/Rs on both sides.
   610
   611
   612
   613
   614
   615
   616	Minaburo, et al.	  Expires June 7, 2020		       [Page 11]
   617
   618	Internet-Draft		       LPWAN SCHC		   December 2019
   619
   620
   621	   The operation in the Downlink direction is similar to that in the
   622	   Uplink direction, only reversing the order in which the architecture
   623	   elements are traversed.
   624
   625	6.  Rule ID
   626
   627	   Rule IDs identify the Rules used for Compression/Decompression or for
   628	   Fragmentation/Reassembly.
   629
   630	   The scope of the Rule ID of a Compression/Decompression Rule is the
   631	   link between the SCHC C/D in a given Dev and the corresponding SCHC
   632	   C/D in the Network infrastructure side.  The scope of the Rule ID of
   633	   a Fragmentation/Reassembly Rule is the link between the SCHC F/R in a
   634	   given Dev and the corresponding SCHC F/R in the Network
   635	   infrastructure side.  If such a link is bidirectional, the scope
   636	   includes both directions.
   637
   638	   Inside their scopes, Rules for Compression/Decompression and Rules
   639	   for Fragmentation/Reassembly share the same Rule ID space.
   640
   641	   The size of the Rule IDs is not specified in this document, as it is
   642	   implementation-specific and can vary according to the LPWAN
   643	   technology and the number of Rules, among others.  It is defined in
   644	   Profiles.
   645
   646	   The Rule IDs are used:
   647
   648	   o  For SCHC C/D, to identify the Rule (i.e., the set of Field
   649	      Descriptions) that is used to compress a packet header.
   650
   651	      *  At least one Rule ID MUST be allocated to tagging packets for
   652		 which SCHC compression was not possible (i.e., no matching
   653		 compression Rule was found).
   654
   655	   o  In SCHC F/R, to identify the specific mode and settings of F/R for
   656	      one direction of traffic (Up or Dw).
   657
   658	      *  When F/R is used for both communication directions, at least
   659		 two Rule ID values are needed for F/R, one per direction of
   660		 traffic.  This is because F/R may entail control messages
   661		 flowing in the reverse direction compared to data traffic.
   662
   663	7.  Compression/Decompression
   664
   665	   Compression with SCHC is based on using a set of Rules, called the
   666	   Context, to compress or decompress headers.	SCHC avoids Context
   667	   synchronization traffic, which consumes considerable bandwidth in
   668	   other header compression mechanisms such as RoHC [RFC5795].	Since
   669
   670
   671
   672	Minaburo, et al.	  Expires June 7, 2020		       [Page 12]
   673
   674	Internet-Draft		       LPWAN SCHC		   December 2019
   675
   676
   677	   the content of packets is highly predictable in LPWAN networks,
   678	   static Contexts can be stored beforehand.  The Contexts MUST be
   679	   stored at both ends, and they can be learned by a provisioning
   680	   protocol or by out of band means, or they can be pre-provisioned.
   681	   The way the Contexts are provisioned is out of the scope of this
   682	   document.
   683
   684	7.1.  SCHC C/D Rules
   685
   686	   The main idea of the SCHC compression scheme is to transmit the Rule
   687	   ID to the other end instead of sending known field values.  This Rule
   688	   ID identifies a Rule that matches the original packet values.  Hence,
   689	   when a value is known by both ends, it is only necessary to send the
   690	   corresponding Rule ID over the LPWAN network.  The manner by which
   691	   Rules are generated is out of the scope of this document.  The Rules
   692	   MAY be changed at run-time but the mechanism is out of scope of this
   693	   document.
   694
   695	   The Context is a set of Rules.  See Figure 6 for a high level,
   696	   abstract representation of the Context.  The formal specification of
   697	   the representation of the Rules is outside the scope of this
   698	   document.
   699
   700	   Each Rule itself contains a list of Field Descriptions composed of a
   701	   Field Identifier (FID), a Field Length (FL), a Field Position (FP), a
   702	   Direction Indicator (DI), a Target Value (TV), a Matching Operator
   703	   (MO) and a Compression/Decompression Action (CDA).
   704
   705	     /-----------------------------------------------------------------\
   706	     |			       Rule N				       |
   707	    /-----------------------------------------------------------------\|
   708	    |			    Rule i				      ||
   709	   /-----------------------------------------------------------------\||
   710	   |  (FID)	       Rule 1					     |||
   711	   |+-------+--+--+--+------------+-----------------+---------------+|||
   712	   ||Field 1|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act||||
   713	   |+-------+--+--+--+------------+-----------------+---------------+|||
   714	   ||Field 2|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act||||
   715	   |+-------+--+--+--+------------+-----------------+---------------+|||
   716	   ||...    |..|..|..|	 ...	  | ... 	    | ...	    ||||
   717	   |+-------+--+--+--+------------+-----------------+---------------+||/
   718	   ||Field N|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act|||
   719	   |+-------+--+--+--+------------+-----------------+---------------+|/
   720	   |								     |
   721	   \-----------------------------------------------------------------/
   722
   723
   724		       Figure 6: A Compression/Decompression Context
   725
   726
   727
   728	Minaburo, et al.	  Expires June 7, 2020		       [Page 13]
   729
   730	Internet-Draft		       LPWAN SCHC		   December 2019
   731
   732
   733	   A Rule does not describe how the compressor parses a packet header to
   734	   find and identify each field (e.g., the IPv6 Source Address, the UDP
   735	   Destination Port or a CoAP URI path option).  It is assumed that
   736	   there is a protocol parser alongside SCHC that is able to identify
   737	   all the fields encountered in the headers to be compressed, and to
   738	   label them with a Field ID.	Rules only describe the compression/
   739	   decompression behavior for each header field, after it has been
   740	   identified.
   741
   742	   In a Rule, the Field Descriptions are listed in the order in which
   743	   the fields appear in the packet header.  The Field Descriptions
   744	   describe the header fields with the following entries:
   745
   746	   o  Field ID (FID) designates a protocol and field (e.g., UDP
   747	      Destination Port), unambiguously among all protocols that a SCHC
   748	      compressor processes.  In the presence of protocol nesting, the
   749	      Field ID also identifies the nesting.
   750
   751	   o  Field Length (FL) represents the length of the original field.  It
   752	      can be either a fixed value (in bits) if the length is known when
   753	      the Rule is created or a type if the length is variable.	The
   754	      length of a header field is defined by its own protocol
   755	      specification (e.g., IPv6 or UDP).  If the length is variable, the
   756	      type defines the process to compute the length and its unit (bits,
   757	      bytes...).
   758
   759	   o  Field Position (FP): most often, a field only occurs once in a
   760	      packet header.  However, some fields may occur multiple times.  An
   761	      example is the uri-path of CoAP.	FP indicates which occurrence
   762	      this Field Description applies to.  If FP is not specified in the
   763	      Field Description, it takes the default value of 1.  The value 1
   764	      designates the first occurrence.	The value 0 is special.  It
   765	      means "don't care", see Section 7.3.
   766
   767	   o  A Direction Indicator (DI) indicates the packet direction(s) this
   768	      Field Description applies to.  Three values are possible:
   769
   770	      *  UPLINK (Up): this Field Description is only applicable to
   771		 packets sent by the Dev to the App,
   772
   773	      *  DOWNLINK (Dw): this Field Description is only applicable to
   774		 packets sent from the App to the Dev,
   775
   776	      *  BIDIRECTIONAL (Bi): this Field Description is applicable to
   777		 packets traveling both Up and Dw.
   778
   779	   o  Target Value (TV) is the value used to match against the packet
   780	      header field.  The Target Value can be a scalar value of any type
   781
   782
   783
   784	Minaburo, et al.	  Expires June 7, 2020		       [Page 14]
   785
   786	Internet-Draft		       LPWAN SCHC		   December 2019
   787
   788
   789	      (integer, strings, etc.) or a more complex structure (array, list,
   790	      etc.).  The types and representations are out of scope for this
   791	      document.
   792
   793	   o  Matching Operator (MO) is the operator used to match the Field
   794	      Value and the Target Value.  The Matching Operator may require
   795	      some parameters.	MO is only used during the compression phase.
   796	      The set of MOs defined in this document can be found in
   797	      Section 7.4.
   798
   799	   o  Compression Decompression Action (CDA) describes the compression
   800	      and decompression processes to be performed after the MO is
   801	      applied.	Some CDAs might use parameter values for their
   802	      operation.  CDAs are used in both the compression and the
   803	      decompression functions.	The set of CDAs defined in this document
   804	      can be found in Section 7.5.
   805
   806	7.2.  Rule ID for SCHC C/D
   807
   808	   Rule IDs are sent by the compression function in one side and are
   809	   received for the decompression function in the other side.  In SCHC
   810	   C/D, the Rule IDs are specific to the Context related to one Dev.
   811	   Hence, multiple Dev instances, which refer to different header
   812	   compression Contexts, MAY reuse the same Rule ID for different Rules.
   813	   On the Network infrastructure side, in order to identify the correct
   814	   Rule to be applied, the SCHC Decompressor needs to associate the Rule
   815	   ID with the Dev identifier.	Similarly, the SCHC Compressor on the
   816	   Network infrastructure side first identifies the destination Dev
   817	   before looking for the appropriate compression Rule (and associated
   818	   Rule ID) in the Context of that Dev.
   819
   820	7.3.  Packet processing
   821
   822	   The compression/decompression process follows several phases:
   823
   824	   o  Compression Rule selection: the general idea is to browse the Rule
   825	      set to find a Rule that has a matching Field Descriptor (given the
   826	      DI and FP) for all and only those header fields that appear in the
   827	      packet being compressed.	The detailed algorithm is the following:
   828
   829	      *  The first step is to check the Field Identifiers (FID).  If any
   830		 header field of the packet being examined cannot be matched
   831		 with a Field Description with the correct FID, the Rule MUST be
   832		 disregarded.  If any Field Description in the Rule has a FID
   833		 that cannot be matched to one of the header fields of the
   834		 packet being examined, the Rule MUST be disregarded.
   835
   836
   837
   838
   839
   840	Minaburo, et al.	  Expires June 7, 2020		       [Page 15]
   841
   842	Internet-Draft		       LPWAN SCHC		   December 2019
   843
   844
   845	      *  The next step is to match the Field Descriptions by their
   846		 direction, using the Direction Indicator (DI).  If any field of
   847		 the packet header cannot be matched with a Field Description
   848		 with the correct FID and DI, the Rule MUST be disregarded.
   849
   850	      *  Then the Field Descriptions are further selected according to
   851		 Field Position (FP).  If any field of the packet header cannot
   852		 be matched with a Field Description with the correct FID, DI
   853		 and FP, the Rule MUST be disregarded.
   854
   855		 The value 0 for FP means "don't care", i.e. the comparison of
   856		 this Field Description's FP with the position of the field of
   857		 the packet header being compressed returns True, whatever that
   858		 position.  FP=0 can be useful to build compression Rules for
   859		 protocols headers in which some fields order is irrelevant.  An
   860		 example could be uri-queries in CoAP.	Care needs to be
   861		 exercised when writing Rules containing FP=0 values.  Indeed,
   862		 it may result in decompressed packets having fields ordered
   863		 differently compared to the original packet.
   864
   865	      *  Once each header field has been associated with a Field
   866		 Description with matching FID, DI and FP, each packet field's
   867		 value is then compared to the corresponding Target Value (TV)
   868		 stored in the Rule for that specific field, using the matching
   869		 operator (MO).  If every field in the packet header satisfies
   870		 the corresponding matching operators (MO) of a Rule (i.e. all
   871		 MO results are True), that Rule is valid for use to compress
   872		 the header.  Otherwise, the Rule MUST be disregarded.
   873
   874		 This specification does not prevent multiple Rules from
   875		 matching the above steps and therefore being valid for use.
   876		 Which Rule to use among multiple valid Rules is left to the
   877		 implementation.  As long as the same Rule set is installed at
   878		 both ends, this degree of freedom does not constitute an
   879		 interoperability issue.
   880
   881	      *  If no valid compression Rule is found, then the packet MUST be
   882		 sent uncompressed using the Rule ID dedicated to this purpose
   883		 (see Section 6).  The entire packet header is the Compression
   884		 Residue (see Figure 4).  Sending an uncompressed header is
   885		 likely to require SCHC F/R.
   886
   887	   o  Compression: if a valid Rule was found, each field of the header
   888	      is compressed according to the Compression/Decompression Actions
   889	      (CDAs) of the Rule.  The fields are compressed in the order that
   890	      the Field Descriptions appear in the Rule.  The compression of
   891	      each field results in a residue, which may be empty.  The
   892	      Compression Residue for the packet header is the concatenation of
   893
   894
   895
   896	Minaburo, et al.	  Expires June 7, 2020		       [Page 16]
   897
   898	Internet-Draft		       LPWAN SCHC		   December 2019
   899
   900
   901	      the non-empty residues for each field of the header, in the order
   902	      the Field Descriptions appear in the Rule.  The order in which the
   903	      Field Descriptions appear in the Rule is therefore semantically
   904	      important.
   905
   906	       |------------------- Compression Residue -------------------|
   907	       +-----------------+-----------------+-----+-----------------+
   908	       | field 1 residue | field 2 residue | ... | field N residue |
   909	       +-----------------+-----------------+-----+-----------------+
   910
   911
   912			  Figure 7: Compression Residue structure
   913
   914	   o  Sending: The Rule ID is sent to the other end followed by the
   915	      Compression Residue (which could be empty) or the uncompressed
   916	      header, and directly followed by the payload (see Figure 4).  The
   917	      way the Rule ID is sent will be specified in the Profile and is
   918	      out of the scope of the present document.  For example, it could
   919	      be included in an L2 header or sent as part of the L2 payload.
   920
   921	   o  Decompression: when decompressing, on the Network infrastructure
   922	      side the SCHC C/D needs to find the correct Rule based on the L2
   923	      address of the Dev; in this way, it can use the DevIID and the
   924	      Rule ID.	On the Dev side, only the Rule ID is needed to identify
   925	      the correct Rule since the Dev typically only holds Rules that
   926	      apply to itself.
   927
   928	      This Rule describes the compressed header format.  From this, the
   929	      decompressor determines the order of the residues, the fixed-sized
   930	      or variable-sized nature of each residue (see Section 7.5.2), and
   931	      the size of the fixed-sized residues.
   932
   933	      From the received compressed header, it can therefore retrieve all
   934	      the residue values and associate them to the corresponding header
   935	      fields.
   936
   937	      For each field in the header, the receiver applies the CDA action
   938	      associated to that field in order to reconstruct the original
   939	      header field value.  The CDA application order can be different
   940	      from the order in which the fields are listed in the Rule.  In
   941	      particular, Compute-* MUST be applied after the application of the
   942	      CDAs of all the fields it computes on.
   943
   944	7.4.  Matching operators
   945
   946	   Matching Operators (MOs) are functions used by both SCHC C/D
   947	   endpoints.  They are not typed and can be applied to integer, string
   948
   949
   950
   951
   952	Minaburo, et al.	  Expires June 7, 2020		       [Page 17]
   953
   954	Internet-Draft		       LPWAN SCHC		   December 2019
   955
   956
   957	   or any other data type.  The result of the operation can either be
   958	   True or False.  MOs are defined as follows:
   959
   960	   o  equal: The match result is True if the field value in the packet
   961	      matches the TV.
   962
   963	   o  ignore: No matching is attempted between the field value in the
   964	      packet and the TV in the Rule.  The result is always true.
   965
   966	   o  MSB(x): A match is obtained if the most significant (leftmost) x
   967	      bits of the packet header field value are equal to the TV in the
   968	      Rule.  The x parameter of the MSB MO indicates how many bits are
   969	      involved in the comparison.  If the FL is described as variable,
   970	      the x parameter must be a multiple of the FL unit.  For example, x
   971	      must be multiple of 8 if the unit of the variable length is bytes.
   972
   973	   o  match-mapping: With match-mapping, the Target Value is a list of
   974	      values.  Each value of the list is identified by an index.
   975	      Compression is achieved by sending the index instead of the
   976	      original header field value.  This operator matches if the header
   977	      field value is equal to one of the values in the target list.
   978
   979	7.5.  Compression Decompression Actions (CDA)
   980
   981	   The Compression Decompression Action (CDA) describes the actions
   982	   taken during the compression of header fields and the inverse action
   983	   taken by the decompressor to restore the original value.
   984
   985	      +--------------+-------------+-------------------------------+
   986	      | Action	     | Compression | Decompression		   |
   987	      +--------------+-------------+-------------------------------+
   988	      | 	     |		   |				   |
   989	      | not-sent     | elided	   | use TV stored in Rule	   |
   990	      | value-sent   | send	   | use received value 	   |
   991	      | mapping-sent | send index  | retrieve value from TV list   |
   992	      | LSB	     | send LSB    | concat. TV and received value |
   993	      | compute-*    | elided	   | recompute at decompressor	   |
   994	      | DevIID	     | elided	   | build IID from L2 Dev addr    |
   995	      | AppIID	     | elided	   | build IID from L2 App addr    |
   996	      +--------------+-------------+-------------------------------+
   997
   998		      Table 1: Compression and Decompression Actions
   999
  1000	   Table 1 summarizes the basic actions that can be used to compress and
  1001	   decompress a field.	The first column shows the action's name.  The
  1002	   second and third columns show the compression and decompression
  1003	   behaviors for each action.
  1004
  1005
  1006
  1007
  1008	Minaburo, et al.	  Expires June 7, 2020		       [Page 18]
  1009
  1010	Internet-Draft		       LPWAN SCHC		   December 2019
  1011
  1012
  1013	7.5.1.	processing fixed-length fields
  1014
  1015	   If the field is identified in the Field Description as being of fixed
  1016	   length, then applying the CDA to compress this field results in a
  1017	   fixed amount of bits.  The residue for that field is simply the bits
  1018	   resulting from applying the CDA to the field.  This value may be
  1019	   empty (e.g., not-sent CDA), in which case the field residue is absent
  1020	   from the Compression Residue.
  1021
  1022	   |- field residue -|
  1023	   +-----------------+
  1024	   |	  value      |
  1025	   +-----------------+
  1026
  1027
  1028		       Figure 8: fixed sized field residue structure
  1029
  1030	7.5.2.	processing variable-length fields
  1031
  1032	   If the field is identified in the Field Description as being of
  1033	   variable length, then applying the CDA to compress this field may
  1034	   result in a value of fixed size (e.g., not-sent or mapping-sent) or
  1035	   of variable size (e.g., value-sent or LSB).	In the latter case, the
  1036	   residue for that field is the bits that result from applying the CDA
  1037	   to the field, preceded with the size of the value.  The most
  1038	   significant bit of the size is stored to the left (leftmost bit of
  1039	   the residue field).
  1040
  1041	   |--- field residue ---|
  1042	   +-------+-------------+
  1043	   |  size |	value	 |
  1044	   +-------+-------------+
  1045
  1046
  1047		     Figure 9: variable sized field residue structure
  1048
  1049	   The size (using the unit defined in the FL) is encoded on 4, 12 or 28
  1050	   bits as follows:
  1051
  1052	   o  If the size is between 0 and 14, it is encoded as a 4 bits
  1053	      unsigned integer.
  1054
  1055	   o  Sizes between 15 and 254 are encoded as 0b1111 followed by the 8
  1056	      bits unsigned integer.
  1057
  1058	   o  Larger sizes are encoded as 0xfff followed by the 16 bits unsigned
  1059	      integer.
  1060
  1061
  1062
  1063
  1064	Minaburo, et al.	  Expires June 7, 2020		       [Page 19]
  1065
  1066	Internet-Draft		       LPWAN SCHC		   December 2019
  1067
  1068
  1069	   If the field is identified in the Field Description as being of
  1070	   variable length and this field is not present in the packet header
  1071	   being compressed, size 0 MUST be sent to denote its absence.
  1072
  1073	7.5.3.	not-sent CDA
  1074
  1075	   The not-sent action can be used when the field value is specified in
  1076	   a Rule and therefore known by both the Compressor and the
  1077	   Decompressor.  This action SHOULD be used with the "equal" MO.  If MO
  1078	   is "ignore", there is a risk to have a decompressed field value
  1079	   different from the original field that was compressed.
  1080
  1081	   The compressor does not send any residue for a field on which not-
  1082	   sent compression is applied.
  1083
  1084	   The decompressor restores the field value with the Target Value
  1085	   stored in the matched Rule identified by the received Rule ID.
  1086
  1087	7.5.4.	value-sent CDA
  1088
  1089	   The value-sent action can be used when the field value is not known
  1090	   by both the Compressor and the Decompressor.  The field is sent in
  1091	   its entirety, using the same bit order as in the original packet
  1092	   header.
  1093
  1094	   If this action is performed on a variable length field, the size of
  1095	   the residue value (using the units defined in FL) MUST be sent as
  1096	   described in Section 7.5.2.
  1097
  1098	   This action is generally used with the "ignore" MO.
  1099
  1100	7.5.5.	mapping-sent CDA
  1101
  1102	   The mapping-sent action is used to send an index (the index into the
  1103	   Target Value list of values) instead of the original value.	This
  1104	   action is used together with the "match-mapping" MO.
  1105
  1106	   On the compressor side, the match-mapping Matching Operator searches
  1107	   the TV for a match with the header field value.  The mapping-sent CDA
  1108	   then sends the corresponding index as the field residue.  The most
  1109	   significant bit of the index is stored to the left (leftmost bit of
  1110	   the residue field).
  1111
  1112	   On the decompressor side, the CDA uses the received index to restore
  1113	   the field value by looking up the list in the TV.
  1114
  1115	   The number of bits sent is the minimal size for coding all the
  1116	   possible indices.
  1117
  1118
  1119
  1120	Minaburo, et al.	  Expires June 7, 2020		       [Page 20]
  1121
  1122	Internet-Draft		       LPWAN SCHC		   December 2019
  1123
  1124
  1125	   The first element in the list MUST be represented by index value 0,
  1126	   and successive elements in the list MUST have indices incremented by
  1127	   1.
  1128
  1129	7.5.6.	LSB CDA
  1130
  1131	   The LSB action is used together with the "MSB(x)" MO to avoid sending
  1132	   the most significant part of the packet field if that part is already
  1133	   known by the receiving end.
  1134
  1135	   The compressor sends the Least Significant Bits as the field residue
  1136	   value.  The number of bits sent is the original header field length
  1137	   minus the length specified in the MSB(x) MO.  The bits appear in the
  1138	   residue in the same bit order as in the original packet header.
  1139
  1140	   The decompressor concatenates the x most significant bits of Target
  1141	   Value and the received residue value.
  1142
  1143	   If this action is performed on a variable length field, the size of
  1144	   the residue value (using the units defined in FL) MUST be sent as
  1145	   described in Section 7.5.2.
  1146
  1147	7.5.7.	DevIID, AppIID CDA
  1148
  1149	   These actions are used to process respectively the Dev and the App
  1150	   Interface Identifiers (DevIID and AppIID) of the IPv6 addresses.
  1151	   AppIID CDA is less common since most current LPWAN technologies
  1152	   frames contain a single L2 address, which is the Dev's address.
  1153
  1154	   The IID value MAY be computed from the Device ID present in the L2
  1155	   header, or from some other stable identifier.  The computation is
  1156	   specific to each Profile and MAY depend on the Device ID size.
  1157
  1158	   In the downlink direction (Dw), at the compressor, the DevIID CDA may
  1159	   be used to generate the L2 addresses on the LPWAN, based on the
  1160	   packet's Destination Address.
  1161
  1162	7.5.8.	Compute-*
  1163
  1164	   Some fields can be elided at the compressor and recomputed locally at
  1165	   the decompressor.
  1166
  1167	   Because the field is uniquely identified by its Field ID (e.g., UDP
  1168	   length), the relevant protocol specification unambiguously defines
  1169	   the algorithm for such computation.
  1170
  1171	   Examples of fields that know how to recompute themselves are UDP
  1172	   length, IPv6 length and UDP checksum.
  1173
  1174
  1175
  1176	Minaburo, et al.	  Expires June 7, 2020		       [Page 21]
  1177
  1178	Internet-Draft		       LPWAN SCHC		   December 2019
  1179
  1180
  1181	8.  Fragmentation/Reassembly
  1182
  1183	8.1.  Overview
  1184
  1185	   In LPWAN technologies, the L2 MTU typically ranges from tens to
  1186	   hundreds of bytes.  Some of these technologies do not have an
  1187	   internal fragmentation/reassembly mechanism.
  1188
  1189	   The optional SCHC Fragmentation/Reassembly (SCHC F/R) functionality
  1190	   enables such LPWAN technologies to comply with the IPv6 MTU
  1191	   requirement of 1280 bytes [RFC8200].  It is OPTIONAL to implement per
  1192	   this specification, but Profiles may specify that it is REQUIRED.
  1193
  1194	   This specification includes several SCHC F/R modes, which allow for a
  1195	   range of reliability options such as optional SCHC Fragment
  1196	   retransmission.  More modes may be defined in the future.
  1197
  1198	   The same SCHC F/R mode MUST be used for all SCHC Fragments of a given
  1199	   SCHC Packet.  This document does not specify which mode(s) must be
  1200	   implemented and used over a specific LPWAN technology.  That
  1201	   information will be given in Profiles.
  1202
  1203	   SCHC allows transmitting non-fragmented SCHC Packet concurrently with
  1204	   fragmented SCHC Packets.  In addition, SCHC F/R provides protocol
  1205	   elements that allow transmitting several fragmented SCHC Packets
  1206	   concurrently, i.e. interleaving the transmission of fragments from
  1207	   different fragmented SCHC Packets.  A Profile MAY restrict the latter
  1208	   behavior.
  1209
  1210	   The L2 Word size (see Section 4) determines the encoding of some
  1211	   messages.  SCHC F/R usually generates SCHC Fragments and SCHC ACKs
  1212	   that are multiples of L2 Words.
  1213
  1214	8.2.  SCHC F/R Protocol Elements
  1215
  1216	   This subsection describes the different elements that are used to
  1217	   enable the SCHC F/R functionality defined in this document.	These
  1218	   elements include the SCHC F/R messages, tiles, windows, bitmaps,
  1219	   counters, timers and header fields.
  1220
  1221	   The elements are described here in a generic manner.  Their
  1222	   application to each SCHC F/R mode is found in Section 8.4.
  1223
  1224	8.2.1.	Messages
  1225
  1226	   SCHC F/R defines the following messages:
  1227
  1228
  1229
  1230
  1231
  1232	Minaburo, et al.	  Expires June 7, 2020		       [Page 22]
  1233
  1234	Internet-Draft		       LPWAN SCHC		   December 2019
  1235
  1236
  1237	   o  SCHC Fragment: A message that carries part of a SCHC Packet from
  1238	      the sender to the receiver.
  1239
  1240	   o  SCHC ACK: An acknowledgement for fragmentation, by the receiver to
  1241	      the sender.  This message is used to indicate whether or not the
  1242	      reception of pieces of, or the whole of the fragmented SCHC
  1243	      Packet, was successful.
  1244
  1245	   o  SCHC ACK REQ: A request by the sender for a SCHC ACK from the
  1246	      receiver.
  1247
  1248	   o  SCHC Sender-Abort: A message by the sender telling the receiver
  1249	      that it has aborted the transmission of a fragmented SCHC Packet.
  1250
  1251	   o  SCHC Receiver-Abort: A message by the receiver to tell the sender
  1252	      to abort the transmission of a fragmented SCHC Packet.
  1253
  1254	   The format of these messages is provided in Section 8.3.
  1255
  1256	8.2.2.	Tiles, Windows, Bitmaps, Timers, Counters
  1257
  1258	8.2.2.1.  Tiles
  1259
  1260	   The SCHC Packet is fragmented into pieces, hereafter called tiles.
  1261	   The tiles MUST be non-empty and pairwise disjoint.  Their union MUST
  1262	   be equal to the SCHC Packet.
  1263
  1264	   See Figure 10 for an example.
  1265
  1266					  SCHC Packet
  1267	       +----+--+-----+---+----+-+---+---+-----+...-----+----+---+------+
  1268	Tiles  |    |  |     |	 |    | |   |	|     |        |    |	|      |
  1269	       +----+--+-----+---+----+-+---+---+-----+...-----+----+---+------+
  1270
  1271
  1272		       Figure 10: a SCHC Packet fragmented in tiles
  1273
  1274	   Modes (see Section 8.4) MAY place additional constraints on tile
  1275	   sizes.
  1276
  1277	   Each SCHC Fragment message carries at least one tile in its Payload,
  1278	   if the Payload field is present.
  1279
  1280	8.2.2.2.  Windows
  1281
  1282	   Some SCHC F/R modes may handle successive tiles in groups, called
  1283	   windows.
  1284
  1285
  1286
  1287
  1288	Minaburo, et al.	  Expires June 7, 2020		       [Page 23]
  1289
  1290	Internet-Draft		       LPWAN SCHC		   December 2019
  1291
  1292
  1293	   If windows are used
  1294
  1295	   o  all the windows of a SCHC Packet, except the last one, MUST
  1296	      contain the same number of tiles.  This number is WINDOW_SIZE.
  1297
  1298	   o  WINDOW_SIZE MUST be specified in a Profile.
  1299
  1300	   o  the windows are numbered.
  1301
  1302	   o  their numbers MUST increment by 1 from 0 upward, from the start of
  1303	      the SCHC Packet to its end.
  1304
  1305	   o  the last window MUST contain WINDOW_SIZE tiles or less.
  1306
  1307	   o  tiles are numbered within each window.
  1308
  1309	   o  the tile indices MUST decrement by 1 from WINDOW_SIZE - 1
  1310	      downward, looking from the start of the SCHC Packet toward its
  1311	      end.
  1312
  1313	   o  each tile of a SCHC Packet is therefore uniquely identified by a
  1314	      window number and a tile index within this window.
  1315
  1316	   See Figure 11 for an example.
  1317
  1318		 +---------------------------------------------...-------------+
  1319		 |			   SCHC Packet			       |
  1320		 +---------------------------------------------...-------------+
  1321
  1322	Tile #	 | 4 | 3 | 2 | 1 | 0 | 4 | 3 | 2 | 1 | 0 | 4 |	   | 0 | 4 | 3 |
  1323	Window # |-------- 0 --------|-------- 1 --------|- 2  ... 27 -|-- 28 -|
  1324
  1325
  1326	    Figure 11: a SCHC Packet fragmented in tiles grouped in 29 windows,
  1327				   with WINDOW_SIZE = 5
  1328
  1329	   Appendix E discusses the benefits of selecting one among multiple
  1330	   window sizes depending on the size of the SCHC Packet to be
  1331	   fragmented.
  1332
  1333	   When windows are used
  1334
  1335	   o  Bitmaps (see Section 8.2.2.3) MAY be sent back by the receiver to
  1336	      the sender in a SCHC ACK message.
  1337
  1338	   o  A Bitmap corresponds to exactly one Window.
  1339
  1340
  1341
  1342
  1343
  1344	Minaburo, et al.	  Expires June 7, 2020		       [Page 24]
  1345
  1346	Internet-Draft		       LPWAN SCHC		   December 2019
  1347
  1348
  1349	8.2.2.3.  Bitmaps
  1350
  1351	   Each bit in the Bitmap for a window corresponds to a tile in the
  1352	   window.  Each Bitmap has therefore WINDOW_SIZE bits.  The bit at the
  1353	   left-most position corresponds to the tile numbered WINDOW_SIZE - 1.
  1354	   Consecutive bits, going right, correspond to sequentially decreasing
  1355	   tile indices.  In Bitmaps for windows that are not the last one of a
  1356	   SCHC Packet, the bit at the right-most position corresponds to the
  1357	   tile numbered 0.  In the Bitmap for the last window, the bit at the
  1358	   right-most position corresponds either to the tile numbered 0 or to a
  1359	   tile that is sent/received as "the last one of the SCHC Packet"
  1360	   without explicitly stating its number (see Section 8.3.1.2).
  1361
  1362	   At the receiver
  1363
  1364	   o  a bit set to 1 in the Bitmap indicates that a tile associated with
  1365	      that bit position has been correctly received for that window.
  1366
  1367	   o  a bit set to 0 in the Bitmap indicates that there has been no tile
  1368	      correctly received, associated with that bit position, for that
  1369	      window.  Possible reasons include that the tile was not sent at
  1370	      all, not received, or received with errors.
  1371
  1372	8.2.2.4.  Timers and counters
  1373
  1374	   Some SCHC F/R modes can use the following timers and counters
  1375
  1376	   o  Inactivity Timer: a SCHC Fragment receiver uses this timer to
  1377	      abort waiting for a SCHC F/R message.
  1378
  1379	   o  Retransmission Timer: a SCHC Fragment sender uses this timer to
  1380	      abort waiting for an expected SCHC ACK.
  1381
  1382	   o  Attempts: this counter counts the requests for SCHC ACKs, up to
  1383	      MAX_ACK_REQUESTS.
  1384
  1385	8.2.3.	Integrity Checking
  1386
  1387	   The integrity of the fragmentation-reassembly process of a SCHC
  1388	   Packet MUST be checked at the receive end.  A Profile MUST specify
  1389	   how integrity checking is performed.
  1390
  1391	   It is RECOMMENDED that integrity checking be performed by computing a
  1392	   Reassembly Check Sequence (RCS) based on the SCHC Packet at the
  1393	   sender side and transmitting it to the receiver for comparison with
  1394	   the RCS locally computed after reassembly.
  1395
  1396
  1397
  1398
  1399
  1400	Minaburo, et al.	  Expires June 7, 2020		       [Page 25]
  1401
  1402	Internet-Draft		       LPWAN SCHC		   December 2019
  1403
  1404
  1405	   The RCS supports UDP checksum elision by SCHC C/D (see
  1406	   Section 10.11).
  1407
  1408	   The CRC32 polynomial 0xEDB88320 (i.e., the reversed polynomial
  1409	   representation, which is used in the Ethernet standard [ETHERNET]) is
  1410	   RECOMMENDED as the default algorithm for computing the RCS.
  1411
  1412	   The RCS MUST be computed on the full SCHC Packet concatenated with
  1413	   the padding bits, if any, of the SCHC Fragment carrying the last
  1414	   tile.  The rationale is that the SCHC reassembler has no way of
  1415	   knowing the boundary between the last tile and the padding bits.
  1416	   Indeed, this requires decompressing the SCHC Packet, which is out of
  1417	   the scope of the SCHC reassembler.
  1418
  1419	   The concatenation of the complete SCHC Packet and any padding bits,
  1420	   if present, of the last SCHC Fragment does not generally constitute
  1421	   an integer number of bytes.	CRC libraries are usually byte-oriented.
  1422	   It is RECOMMENDED that the concatenation of the complete SCHC Packet
  1423	   and any last fragment padding bits be zero-extended to the next byte
  1424	   boundary and that the RCS be computed on that byte array.
  1425
  1426	8.2.4.	Header Fields
  1427
  1428	   The SCHC F/R messages contain the following fields (see the formats
  1429	   in Section 8.3):
  1430
  1431	   o  Rule ID: this field is present in all the SCHC F/R messages.  The
  1432	      Rule identifies
  1433
  1434	      *  that a SCHC F/R message is being carried, as opposed to an
  1435		 unfragmented SCHC Packet,
  1436
  1437	      *  which SCHC F/R mode is used
  1438
  1439	      *  in case this mode uses windows, what the value of WINDOW_SIZE
  1440		 is,
  1441
  1442	      *  what other optional fields are present and what the field sizes
  1443		 are.
  1444
  1445	      The Rule tells apart a non-fragmented SCHC Packet from SCHC
  1446	      Fragments.  It will also tell apart SCHC Fragments of fragmented
  1447	      SCHC Packets that use different SCHC F/R modes or different
  1448	      parameters.  Interleaved transmission of these is therefore
  1449	      possible.
  1450
  1451	      All SCHC F/R messages pertaining to the same SCHC Packet MUST bear
  1452	      the same Rule ID.
  1453
  1454
  1455
  1456	Minaburo, et al.	  Expires June 7, 2020		       [Page 26]
  1457
  1458	Internet-Draft		       LPWAN SCHC		   December 2019
  1459
  1460
  1461	   o  Datagram Tag (DTag).  This field allows differentiating SCHC F/R
  1462	      messages belonging to different SCHC Packets that may be using the
  1463	      same Rule ID simultaneously.  Hence, it allows interleaving
  1464	      fragments of a new SCHC Packet with fragments of a previous SCHC
  1465	      Packet under the same Rule ID.
  1466
  1467	      The size of the DTag field (called T, in bits) is defined by each
  1468	      Profile for each Rule ID.  When T is 0, the DTag field does not
  1469	      appear in the SCHC F/R messages and the DTag value is defined as
  1470	      0.
  1471
  1472	      When T is 0, there can be no more than one fragmented SCHC Packet
  1473	      in transit for each fragmentation Rule ID.
  1474
  1475	      If T is not 0, DTag
  1476
  1477	      *  MUST be set to the same value for all the SCHC F/R messages
  1478		 related to the same fragmented SCHC Packet,
  1479
  1480	      *  MUST be set to different values for SCHC F/R messages related
  1481		 to different SCHC Packets that are being fragmented under the
  1482		 same Rule ID, and whose transmission may overlap.
  1483
  1484	   o  W: The W field is optional.  It is only present if windows are
  1485	      used.  Its presence and size (called M, in bits) is defined by
  1486	      each SCHC F/R mode and each Profile for each Rule ID.
  1487
  1488	      This field carries information pertaining to the window a SCHC F/R
  1489	      message relates to.  If present, W MUST carry the same value for
  1490	      all the SCHC F/R messages related to the same window.  Depending
  1491	      on the mode and Profile, W may carry the full window number, or
  1492	      just the least significant bit or any other partial representation
  1493	      of the window number.
  1494
  1495	   o  Fragment Compressed Number (FCN).  The FCN field is present in the
  1496	      SCHC Fragment Header.  Its size (called N, in bits) is defined by
  1497	      each Profile for each Rule ID.
  1498
  1499	      This field conveys information about the progress in the sequence
  1500	      of tiles being transmitted by SCHC Fragment messages.  For
  1501	      example, it can contain a partial, efficient representation of a
  1502	      larger-sized tile index.	The description of the exact use of the
  1503	      FCN field is left to each SCHC F/R mode.	However, two values are
  1504	      reserved for special purposes.  They help control the SCHC F/R
  1505	      process:
  1506
  1507	      *  The FCN value with all the bits equal to 1 (called All-1)
  1508		 signals that the very last tile of a SCHC Packet has been
  1509
  1510
  1511
  1512	Minaburo, et al.	  Expires June 7, 2020		       [Page 27]
  1513
  1514	Internet-Draft		       LPWAN SCHC		   December 2019
  1515
  1516
  1517		 transmitted.  By extension, if windows are used, the last
  1518		 window of a packet is called the All-1 window.
  1519
  1520	      *  If windows are used, the FCN value with all the bits equal to 0
  1521		 (called All-0) signals the last tile of a window that is not
  1522		 the last one of the SCHC packet.  By extension, such a window
  1523		 is called an All-0 window.
  1524
  1525	   o  Reassembly Check Sequence (RCS).	This field only appears in the
  1526	      All-1 SCHC Fragments.  Its size (called U, in bits) is defined by
  1527	      each Profile for each Rule ID.
  1528
  1529	      See Section 8.2.3 for the RCS default size, default polynomial and
  1530	      details on RCS computation.
  1531
  1532	   o  C (integrity Check): C is a 1-bit field.	This field is used in
  1533	      the SCHC ACK message to report on the reassembled SCHC Packet
  1534	      integrity check (see Section 8.2.3).
  1535
  1536	      A value of 1 tells that the integrity check was performed and is
  1537	      successful.  A value of 0 tells that the integrity check was not
  1538	      performed, or that is was a failure.
  1539
  1540	   o  Compressed Bitmap.  The Compressed Bitmap is used together with
  1541	      windows and Bitmaps (see Section 8.2.2.3).  Its presence and size
  1542	      is defined for each F/R mode for each Rule ID.
  1543
  1544	      This field appears in the SCHC ACK message to report on the
  1545	      receiver Bitmap (see Section 8.3.2.1).
  1546
  1547	8.3.  SCHC F/R Message Formats
  1548
  1549	   This section defines the SCHC Fragment formats, the SCHC ACK format,
  1550	   the SCHC ACK REQ format and the SCHC Abort formats.
  1551
  1552	8.3.1.	SCHC Fragment format
  1553
  1554	   A SCHC Fragment conforms to the general format shown in Figure 12.
  1555	   It comprises a SCHC Fragment Header and a SCHC Fragment Payload.  The
  1556	   SCHC Fragment Payload carries one or several tile(s).
  1557
  1558	   +-----------------+-----------------------+~~~~~~~~~~~~~~~~~~~~~
  1559	   | Fragment Header |	 Fragment Payload    | padding (as needed)
  1560	   +-----------------+-----------------------+~~~~~~~~~~~~~~~~~~~~~
  1561
  1562			  Figure 12: SCHC Fragment general format
  1563
  1564
  1565
  1566
  1567
  1568	Minaburo, et al.	  Expires June 7, 2020		       [Page 28]
  1569
  1570	Internet-Draft		       LPWAN SCHC		   December 2019
  1571
  1572
  1573	8.3.1.1.  Regular SCHC Fragment
  1574
  1575	   The Regular SCHC Fragment format is shown in Figure 13.  Regular SCHC
  1576	   Fragments are generally used to carry tiles that are not the last one
  1577	   of a SCHC Packet.  The DTag field and the W field are OPTIONAL, their
  1578	   presence is specified by each mode and Profile.
  1579
  1580	 |--- SCHC Fragment Header ----|
  1581		   |-- T --|-M-|-- N --|
  1582	 +-- ... --+- ... -+---+- ... -+--------...-------+~~~~~~~~~~~~~~~~~~~~~
  1583	 | Rule ID | DTag  | W |  FCN  | Fragment Payload | padding (as needed)
  1584	 +-- ... --+- ... -+---+- ... -+--------...-------+~~~~~~~~~~~~~~~~~~~~~
  1585
  1586	       Figure 13: Detailed Header Format for Regular SCHC Fragments
  1587
  1588	   The FCN field MUST NOT contain all bits set to 1.
  1589
  1590	   Profiles MUST ensure that a SCHC Fragment with FCN equal to 0 (called
  1591	   an All-0 SCHC Fragment) is distinguishable by size, even in the
  1592	   presence of padding, from a SCHC ACK REQ message (see Section 8.3.3)
  1593	   with the same Rule ID value and with the same T, M and N values.
  1594	   This condition is met if the Payload is at least the size of an L2
  1595	   Word.  This condition is also met if the SCHC Fragment Header is a
  1596	   multiple of L2 Words.
  1597
  1598	8.3.1.2.  All-1 SCHC Fragment
  1599
  1600	   The All-1 SCHC Fragment format is shown in Figure 14.  The sender
  1601	   uses the All-1 SCHC Fragment format for the message that completes
  1602	   the emission of a fragmented SCHC Packet.  The DTag field, the W
  1603	   field, the RCS field and the Payload are OPTIONAL, their presence is
  1604	   specified by each mode and Profile.	At least one of RCS field or
  1605	   Payload MUST be present.  The FCN field is all ones.
  1606
  1607	|-------- SCHC Fragment Header -------|
  1608		  |-- T --|-M-|-- N --|-- U --|
  1609	+-- ... --+- ... -+---+- ... -+- ... -+------...-----+~~~~~~~~~~~~~~~~~~
  1610	| Rule ID | DTag  | W | 11..1 |  RCS  | Frag Payload | pad. (as needed)
  1611	+-- ... --+- ... -+---+- ... -+- ... -+------...-----+~~~~~~~~~~~~~~~~~~
  1612				(FCN)
  1613
  1614	       Figure 14: Detailed Header Format for the All-1 SCHC Fragment
  1615
  1616	   Profiles MUST ensure that an All-1 SCHC Fragment message is
  1617	   distinguishable by size, even in the presence of padding, from a SCHC
  1618	   Sender-Abort message (see Section 8.3.4) with the same Rule ID value
  1619	   and with the same T, M and N values.  This condition is met if the
  1620	   RCS is present and is at least the size of an L2 Word, or if the
  1621
  1622
  1623
  1624	Minaburo, et al.	  Expires June 7, 2020		       [Page 29]
  1625
  1626	Internet-Draft		       LPWAN SCHC		   December 2019
  1627
  1628
  1629	   Payload is present and at least the size an L2 Word.  This condition
  1630	   is also met if the SCHC Sender-Abort Header is a multiple of L2
  1631	   Words.
  1632
  1633	8.3.2.	SCHC ACK format
  1634
  1635	   The SCHC ACK message is shown in Figure 15.	The DTag field and the W
  1636	   field are OPTIONAL, their presence is specified by each mode and
  1637	   Profile.  The Compressed Bitmap field MUST be present in SCHC F/R
  1638	   modes that use windows, and MUST NOT be present in other modes.
  1639
  1640	  |---- SCHC ACK Header ----|
  1641		    |-- T --|-M-| 1 |
  1642	  +--- ... -+- ... -+---+---+~~~~~~~~~~~~~~~~~~
  1643	  | Rule ID |  DTag | W |C=1| padding as needed 	       (success)
  1644	  +--- ... -+- ... -+---+---+~~~~~~~~~~~~~~~~~~
  1645
  1646	  +--- ... -+- ... -+---+---+------ ... ------+~~~~~~~~~~~~~~~
  1647	  | Rule ID |  DTag | W |C=0|Compressed Bitmap| pad. as needed (failure)
  1648	  +--- ... -+- ... -+---+---+------ ... ------+~~~~~~~~~~~~~~~
  1649
  1650
  1651			 Figure 15: Format of the SCHC ACK message
  1652
  1653	   The SCHC ACK Header contains a C bit (see Section 8.2.4).
  1654
  1655	   If the C bit is set to 1 (integrity check successful), no Bitmap is
  1656	   carried.
  1657
  1658	   If the C bit is set to 0 (integrity check not performed or failed)
  1659	   and if windows are used, a Compressed Bitmap for the window referred
  1660	   to by the W field is transmitted as specified in Section 8.3.2.1.
  1661
  1662	8.3.2.1.  Bitmap Compression
  1663
  1664	   For transmission, the Compressed Bitmap in the SCHC ACK message is
  1665	   defined by the following algorithm (see Figure 16 for a follow-along
  1666	   example):
  1667
  1668	   o  Build a temporary SCHC ACK message that contains the Header
  1669	      followed by the original Bitmap (see Section 8.2.2.3 for a
  1670	      description of Bitmaps).
  1671
  1672	   o  Position scissors at the end of the Bitmap, after its last bit.
  1673
  1674	   o  While the bit on the left of the scissors is 1 and belongs to the
  1675	      Bitmap, keep moving left, then stop.  When this is done,
  1676
  1677
  1678
  1679
  1680	Minaburo, et al.	  Expires June 7, 2020		       [Page 30]
  1681
  1682	Internet-Draft		       LPWAN SCHC		   December 2019
  1683
  1684
  1685	   o  While the scissors are not on an L2 Word boundary of the SCHC ACK
  1686	      message and there is a Bitmap bit on the right of the scissors,
  1687	      keep moving right, then stop.
  1688
  1689	   o  At this point, cut and drop off any bits to the right of the
  1690	      scissors
  1691
  1692	   When one or more bits have effectively been dropped off as a result
  1693	   of the above algorithm, the SCHC ACK message is a multiple of L2
  1694	   Words, no padding bits will be appended.
  1695
  1696	   Because the SCHC Fragment sender knows the size of the original
  1697	   Bitmap, it can reconstruct the original Bitmap from the Compressed
  1698	   Bitmap received in the SCH ACK message.
  1699
  1700	   Figure 16 shows an example where L2 Words are actually bytes and
  1701	   where the original Bitmap contains 17 bits, the last 15 of which are
  1702	   all set to 1.
  1703
  1704	   |---- SCHC ACK Header ----|--------	    Bitmap     --------|
  1705		     |-- T --|-M-| 1 |
  1706	   +--- ... -+- ... -+---+---+---------------------------------+
  1707	   | Rule ID |	DTag | W |C=0|1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|
  1708	   +--- ... -+- ... -+---+---+---------------------------------+
  1709		   next L2 Word boundary ->|
  1710
  1711		    Figure 16: SCHC ACK Header plus uncompressed Bitmap
  1712
  1713	   Figure 17 shows that the last 14 bits are not sent.
  1714
  1715	   |---- SCHC ACK Header ----|CpBmp|
  1716		     |-- T --|-M-| 1 |
  1717	   +--- ... -+- ... -+---+---+-----+
  1718	   | Rule ID |	DTag | W |C=0|1 0 1|
  1719	   +--- ... -+- ... -+---+---+-----+
  1720		   next L2 Word boundary ->|
  1721
  1722	       Figure 17: Resulting SCHC ACK message with Compressed Bitmap
  1723
  1724	   Figure 18 shows an example of a SCHC ACK with tile indices ranging
  1725	   from 6 down to 0, where the Bitmap indicates that the second and the
  1726	   fourth tile of the window have not been correctly received.
  1727
  1728
  1729
  1730
  1731
  1732
  1733
  1734
  1735
  1736	Minaburo, et al.	  Expires June 7, 2020		       [Page 31]
  1737
  1738	Internet-Draft		       LPWAN SCHC		   December 2019
  1739
  1740
  1741	   |---- SCHC ACK Header ----|--- Bitmap --|
  1742		     |-- T --|-M-| 1 |6 5 4 3 2 1 0| (tile #)
  1743	   +---------+-------+---+---+-------------+
  1744	   | Rule ID |	DTag | W |C=0|1 0 1 0 1 1 1|	  uncompressed Bitmap
  1745	   +---------+-------+---+---+-------------+
  1746	       next L2 Word boundary ->|<-- L2 Word -->|
  1747
  1748	   +---------+-------+---+---+-------------+~~~+
  1749	   | Rule ID |	DTag | W |C=0|1 0 1 0 1 1 1|Pad|  transmitted SCHC ACK
  1750	   +---------+-------+---+---+-------------+~~~+
  1751	       next L2 Word boundary ->|<-- L2 Word -->|
  1752
  1753		  Figure 18: Example of a SCHC ACK message, missing tiles
  1754
  1755	   Figure 19 shows an example of a SCHC ACK with FCN ranging from 6 down
  1756	   to 0, where integrity check has not been performed or has failed and
  1757	   the Bitmap indicates that there is no missing tile in that window.
  1758
  1759	   |---- SCHC ACK Header ----|--- Bitmap --|
  1760		     |-- T --|-M-| 1 |6 5 4 3 2 1 0| (tile #)
  1761	   +---------+-------+---+---+-------------+
  1762	   | Rule ID |	DTag | W |C=0|1 1 1 1 1 1 1|  with uncompressed Bitmap
  1763	   +---------+-------+---+---+-------------+
  1764	       next L2 Word boundary ->|
  1765
  1766	   +--- ... -+- ... -+---+---+-+
  1767	   | Rule ID |	DTag | W |C=0|1|		  transmitted SCHC ACK
  1768	   +--- ... -+- ... -+---+---+-+
  1769	       next L2 Word boundary ->|
  1770
  1771		 Figure 19: Example of a SCHC ACK message, no missing tile
  1772
  1773	8.3.3.	SCHC ACK REQ format
  1774
  1775	   The SCHC ACK REQ is used by a sender to request a SCHC ACK from the
  1776	   receiver.  Its format is shown in Figure 20.  The DTag field and the
  1777	   W field are OPTIONAL, their presence is specified by each mode and
  1778	   Profile.  The FCN field is all zero.
  1779
  1780	   |---- SCHC ACK REQ Header ----|
  1781		     |-- T --|-M-|-- N --|
  1782	   +-- ... --+- ... -+---+- ... -+~~~~~~~~~~~~~~~~~~~~~
  1783	   | Rule ID | DTag  | W |  0..0 | padding (as needed)	    (no payload)
  1784	   +-- ... --+- ... -+---+- ... -+~~~~~~~~~~~~~~~~~~~~~
  1785
  1786			      Figure 20: SCHC ACK REQ format
  1787
  1788
  1789
  1790
  1791
  1792	Minaburo, et al.	  Expires June 7, 2020		       [Page 32]
  1793
  1794	Internet-Draft		       LPWAN SCHC		   December 2019
  1795
  1796
  1797	8.3.4.	SCHC Sender-Abort format
  1798
  1799	   When a SCHC Fragment sender needs to abort an on-going fragmented
  1800	   SCHC Packet transmission, it sends a SCHC Sender-Abort message to the
  1801	   SCHC Fragment receiver.
  1802
  1803	   The SCHC Sender-Abort format is shown in Figure 21.	The DTag field
  1804	   and the W field are OPTIONAL, their presence is specified by each
  1805	   mode and Profile.  The FCN field is all ones.
  1806
  1807	   |---- Sender-Abort Header ----|
  1808		     |-- T --|-M-|-- N --|
  1809	   +-- ... --+- ... -+---+- ... -+~~~~~~~~~~~~~~~~~~~~~
  1810	   | Rule ID | DTag  | W | 11..1 | padding (as needed)
  1811	   +-- ... --+- ... -+---+- ... -+~~~~~~~~~~~~~~~~~~~~~
  1812
  1813			    Figure 21: SCHC Sender-Abort format
  1814
  1815	   If the W field is present,
  1816
  1817	   o  the fragment sender MUST set it to all ones.  Other values are
  1818	      RESERVED.
  1819
  1820	   o  the fragment receiver MUST check its value.  If the value is
  1821	      different from all ones, the message MUST be ignored.
  1822
  1823	   The SCHC Sender-Abort MUST NOT be acknowledged.
  1824
  1825	8.3.5.	SCHC Receiver-Abort format
  1826
  1827	   When a SCHC Fragment receiver needs to abort an on-going fragmented
  1828	   SCHC Packet transmission, it transmits a SCHC Receiver-Abort message
  1829	   to the SCHC Fragment sender.
  1830
  1831	   The SCHC Receiver-Abort format is shown in Figure 22.  The DTag field
  1832	   and the W field are OPTIONAL, their presence is specified by each
  1833	   mode and Profile.
  1834
  1835	   |--- Receiver-Abort Header ---|
  1836		       |--- T ---|-M-| 1 |
  1837	   +--- ... ---+-- ... --+---+---+-+-+-+-+-+-+-+-+-+-+-+
  1838	   |  Rule ID  |   DTag  | W |C=1| 1..1|      1..1     |
  1839	   +--- ... ---+-- ... --+---+---+-+-+-+-+-+-+-+-+-+-+-+
  1840		       next L2 Word boundary ->|<-- L2 Word -->|
  1841
  1842			   Figure 22: SCHC Receiver-Abort format
  1843
  1844	   If the W field is present,
  1845
  1846
  1847
  1848	Minaburo, et al.	  Expires June 7, 2020		       [Page 33]
  1849
  1850	Internet-Draft		       LPWAN SCHC		   December 2019
  1851
  1852
  1853	   o  the fragment receiver MUST set it to all ones.  Other values are
  1854	      RESERVED.
  1855
  1856	   o  if the value is different from all ones, the fragment sender MUST
  1857	      ignore the message.
  1858
  1859	   The SCHC Receiver-Abort has the same header as a SCHC ACK message.
  1860	   The bits that follow the SCHC Receiver-Abort Header MUST be as
  1861	   follows
  1862
  1863	   o  if the Header does not end at an L2 Word boundary, append bits set
  1864	      to 1 as needed to reach the next L2 Word boundary
  1865
  1866	   o  append exactly one more L2 Word with bits all set to ones
  1867
  1868	   Such a bit pattern never occurs in a legitimate SCHC ACK.  This is
  1869	   how the fragment sender recognizes a SCHC Receiver-Abort.
  1870
  1871	   The SCHC Receiver-Abort MUST NOT be acknowledged.
  1872
  1873	8.4.  SCHC F/R modes
  1874
  1875	   This specification includes several SCHC F/R modes, which
  1876
  1877	   o  allow for a range of reliability options, such as optional SCHC
  1878	      Fragment retransmission
  1879
  1880	   o  support various LPWAN characteristics, such as links with variable
  1881	      MTU or unidirectional links.
  1882
  1883	   More modes may be defined in the future.
  1884
  1885	   Appendix B provides examples of fragmentation sessions based on the
  1886	   modes described hereafter.
  1887
  1888	   Appendix C provides examples of Finite State Machines implementing
  1889	   the SCHC F/R modes described hereafter.
  1890
  1891	8.4.1.	No-ACK mode
  1892
  1893	   The No-ACK mode has been designed under the assumption that data unit
  1894	   out-of-sequence delivery does not occur between the entity performing
  1895	   fragmentation and the entity performing reassembly.	This mode
  1896	   supports LPWAN technologies that have a variable MTU.
  1897
  1898	   In No-ACK mode, there is no communication from the fragment receiver
  1899	   to the fragment sender.  The sender transmits all the SCHC Fragments
  1900
  1901
  1902
  1903
  1904	Minaburo, et al.	  Expires June 7, 2020		       [Page 34]
  1905
  1906	Internet-Draft		       LPWAN SCHC		   December 2019
  1907
  1908
  1909	   without expecting any acknowledgement.  Therefore, No-ACK does not
  1910	   require bidirectional links: unidirectional links are just fine.
  1911
  1912	   In No-ACK mode, only the All-1 SCHC Fragment is padded as needed.
  1913	   The other SCHC Fragments are intrinsically aligned to L2 Words.
  1914
  1915	   The tile sizes are not required to be uniform.  Windows are not used.
  1916	   The Retransmission Timer is not used.  The Attempts counter is not
  1917	   used.
  1918
  1919	   Each Profile MUST specify which Rule ID value(s) correspond to SCHC
  1920	   F/R messages operating in this mode.
  1921
  1922	   The W field MUST NOT be present in the SCHC F/R messages.  SCHC ACK
  1923	   MUST NOT be sent.  SCHC ACK REQ MUST NOT be sent.  SCHC Sender-Abort
  1924	   MAY be sent.  SCHC Receiver-Abort MUST NOT be sent.
  1925
  1926	   The value of N (size of the FCN field) is RECOMMENDED to be 1.
  1927
  1928	   Each Profile, for each Rule ID value, MUST define
  1929
  1930	   o  the size of the DTag field,
  1931
  1932	   o  the size and algorithm for the RCS field,
  1933
  1934	   o  the expiration time of the Inactivity Timer
  1935
  1936	   Each Profile, for each Rule ID value, MAY define
  1937
  1938	   o  a value of N different from the recommended one,
  1939
  1940	   o  the meaning of values sent in the FCN field, for values different
  1941	      from the All-1 value.
  1942
  1943	   For each active pair of Rule ID and DTag values, the receiver MUST
  1944	   maintain an Inactivity Timer.  If the receiver is under-resourced to
  1945	   do this, it MUST silently drop the related messages.
  1946
  1947	8.4.1.1.  Sender behavior
  1948
  1949	   At the beginning of the fragmentation of a new SCHC Packet, the
  1950	   fragment sender MUST select a Rule ID and DTag value pair for this
  1951	   SCHC Packet.
  1952
  1953	   Each SCHC Fragment MUST contain exactly one tile in its Payload.  The
  1954	   tile MUST be at least the size of an L2 Word.  The sender MUST
  1955	   transmit the SCHC Fragments messages in the order that the tiles
  1956	   appear in the SCHC Packet.  Except for the last tile of a SCHC
  1957
  1958
  1959
  1960	Minaburo, et al.	  Expires June 7, 2020		       [Page 35]
  1961
  1962	Internet-Draft		       LPWAN SCHC		   December 2019
  1963
  1964
  1965	   Packet, each tile MUST be of a size that complements the SCHC
  1966	   Fragment Header so that the SCHC Fragment is a multiple of L2 Words
  1967	   without the need for padding bits.  Except for the last one, the SCHC
  1968	   Fragments MUST use the Regular SCHC Fragment format specified in
  1969	   Section 8.3.1.1.  The SCHC Fragment that carries the last tile MUST
  1970	   be an All-1 SCHC Fragment, described in Section 8.3.1.2.
  1971
  1972	   The sender MAY transmit a SCHC Sender-Abort.
  1973
  1974	   Figure 37 shows an example of a corresponding state machine.
  1975
  1976	8.4.1.2.  Receiver behavior
  1977
  1978	   Upon receiving each Regular SCHC Fragment,
  1979
  1980	   o  the receiver MUST reset the Inactivity Timer,
  1981
  1982	   o  the receiver assembles the payloads of the SCHC Fragments
  1983
  1984	   On receiving an All-1 SCHC Fragment,
  1985
  1986	   o  the receiver MUST append the All-1 SCHC Fragment Payload and the
  1987	      padding bits to the previously received SCHC Fragment Payloads for
  1988	      this SCHC Packet
  1989
  1990	   o  the receiver MUST perform the integrity check
  1991
  1992	   o  if integrity checking fails, the receiver MUST drop the
  1993	      reassembled SCHC Packet
  1994
  1995	   o  the reassembly operation concludes.
  1996
  1997	   On expiration of the Inactivity Timer, the receiver MUST drop the
  1998	   SCHC Packet being reassembled.
  1999
  2000	   On receiving a SCHC Sender-Abort, the receiver MAY drop the SCHC
  2001	   Packet being reassembled.
  2002
  2003	   Figure 38 shows an example of a corresponding state machine.
  2004
  2005	8.4.2.	ACK-Always mode
  2006
  2007	   The ACK-Always mode has been designed under the following assumptions
  2008
  2009	   o  Data unit out-of-sequence delivery does not occur between the
  2010	      entity performing fragmentation and the entity performing
  2011	      reassembly
  2012
  2013
  2014
  2015
  2016	Minaburo, et al.	  Expires June 7, 2020		       [Page 36]
  2017
  2018	Internet-Draft		       LPWAN SCHC		   December 2019
  2019
  2020
  2021	   o  The L2 MTU value does not change while the fragments of a SCHC
  2022	      Packet are being transmitted.
  2023
  2024	   o  There is a feedback path from the reassembler to the fragmenter.
  2025	      See Appendix F for a discussion on using ACK-Always mode on quasi-
  2026	      bidirectional links.
  2027
  2028	   In ACK-Always mode, windows are used.  An acknowledgement, positive
  2029	   or negative, is transmitted by the fragment receiver to the fragment
  2030	   sender at the end of the transmission of each window of SCHC
  2031	   Fragments.
  2032
  2033	   The tiles are not required to be of uniform size.  In ACK-Always
  2034	   mode, only the All-1 SCHC Fragment is padded as needed.  The other
  2035	   SCHC Fragments are intrinsically aligned to L2 Words.
  2036
  2037	   Briefly, the algorithm is as follows: after a first blind
  2038	   transmission of all the tiles of a window, the fragment sender
  2039	   iterates retransmitting the tiles that are reported missing until the
  2040	   fragment receiver reports that all the tiles belonging to the window
  2041	   have been correctly received, or until too many attempts were made.
  2042	   The fragment sender only advances to the next window of tiles when it
  2043	   has ascertained that all the tiles belonging to the current window
  2044	   have been fully and correctly received.  This results in a per-window
  2045	   lock-step behavior between the sender and the receiver.
  2046
  2047	   Each Profile MUST specify which Rule ID value(s) correspond to SCHC
  2048	   F/R messages operating in this mode.
  2049
  2050	   The W field MUST be present and its size M MUST be 1 bit.
  2051
  2052	   Each Profile, for each Rule ID value, MUST define
  2053
  2054	   o  the value of N (size of the FCN field),
  2055
  2056	   o  the value of WINDOW_SIZE, which MUST be strictly less than 2^N,
  2057
  2058	   o  the size and algorithm for the RCS field,
  2059
  2060	   o  the size of the DTag field,
  2061
  2062	   o  the value of MAX_ACK_REQUESTS,
  2063
  2064	   o  the expiration time of the Retransmission Timer
  2065
  2066	   o  the expiration time of the Inactivity Timer
  2067
  2068
  2069
  2070
  2071
  2072	Minaburo, et al.	  Expires June 7, 2020		       [Page 37]
  2073
  2074	Internet-Draft		       LPWAN SCHC		   December 2019
  2075
  2076
  2077	   For each active pair of Rule ID and DTag values, the sender MUST
  2078	   maintain
  2079
  2080	   o  one Attempts counter
  2081
  2082	   o  one Retransmission Timer
  2083
  2084	   For each active pair of Rule ID and DTag values, the receiver MUST
  2085	   maintain
  2086
  2087	   o  one Inactivity Timer
  2088
  2089	   o  one Attempts counter
  2090
  2091	8.4.2.1.  Sender behavior
  2092
  2093	   At the beginning of the fragmentation of a new SCHC Packet, the
  2094	   fragment sender MUST select a Rule ID and DTag value pair for this
  2095	   SCHC Packet.
  2096
  2097	   Each SCHC Fragment MUST contain exactly one tile in its Payload.  All
  2098	   tiles with the index 0, as well as the last tile, MUST be at least
  2099	   the size of an L2 Word.
  2100
  2101	   In all SCHC Fragment messages, the W field MUST be filled with the
  2102	   least significant bit of the window number that the sender is
  2103	   currently processing.
  2104
  2105	   For a SCHC Fragment that carries a tile other than the last one of
  2106	   the SCHC Packet,
  2107
  2108	   o  the Fragment MUST be of the Regular type specified in
  2109	      Section 8.3.1.1
  2110
  2111	   o  the FCN field MUST contain the tile index
  2112
  2113	   o  each tile MUST be of a size that complements the SCHC Fragment
  2114	      Header so that the SCHC Fragment is a multiple of L2 Words without
  2115	      the need for padding bits.
  2116
  2117	   The SCHC Fragment that carries the last tile MUST be an All-1 SCHC
  2118	   Fragment, described in Section 8.3.1.2.
  2119
  2120	   The fragment sender MUST start by transmitting the window numbered 0.
  2121
  2122	   All message receptions being discussed in the rest of this section
  2123	   are to be understood as "matching the RuleID and DTag pair being
  2124	   processed", even if not spelled out, for brevity.
  2125
  2126
  2127
  2128	Minaburo, et al.	  Expires June 7, 2020		       [Page 38]
  2129
  2130	Internet-Draft		       LPWAN SCHC		   December 2019
  2131
  2132
  2133	   The sender starts by a "blind transmission" phase, in which it MUST
  2134	   transmit all the tiles composing the window, in decreasing tile index
  2135	   order.
  2136
  2137	   Then, it enters a "retransmission phase" in which it MUST initialize
  2138	   an Attempts counter to 0, it MUST start a Retransmission Timer and it
  2139	   MUST await a SCHC ACK.  Then,
  2140
  2141	   o  upon receiving a SCHC ACK,
  2142
  2143	      *  if the SCHC ACK indicates that some tiles are missing at the
  2144		 receiver, then the sender MUST transmit all the tiles that have
  2145		 been reported missing, it MUST increment Attempts, it MUST
  2146		 reset the Retransmission Timer and MUST await the next SCHC
  2147		 ACK.
  2148
  2149	      *  if the current window is not the last one and the SCHC ACK
  2150		 indicates that all tiles were correctly received, the sender
  2151		 MUST stop the Retransmission Timer, it MUST advance to the next
  2152		 fragmentation window and it MUST start a blind transmission
  2153		 phase as described above.
  2154
  2155	      *  if the current window is the last one and the SCHC ACK
  2156		 indicates that more tiles were received than the sender sent,
  2157		 the fragment sender MUST send a SCHC Sender-Abort, and it MAY
  2158		 exit with an error condition.
  2159
  2160	      *  if the current window is the last one and the SCHC ACK
  2161		 indicates that all tiles were correctly received yet integrity
  2162		 check was a failure, the fragment sender MUST send a SCHC
  2163		 Sender-Abort, and it MAY exit with an error condition.
  2164
  2165	      *  if the current window is the last one and the SCHC ACK
  2166		 indicates that integrity checking was successful, the sender
  2167		 exits successfully.
  2168
  2169	   o  on Retransmission Timer expiration,
  2170
  2171	      *  if Attempts is strictly less that MAX_ACK_REQUESTS, the
  2172		 fragment sender MUST send a SCHC ACK REQ and MUST increment the
  2173		 Attempts counter.
  2174
  2175	      *  otherwise the fragment sender MUST send a SCHC Sender-Abort,
  2176		 and it MAY exit with an error condition.
  2177
  2178	   At any time,
  2179
  2180
  2181
  2182
  2183
  2184	Minaburo, et al.	  Expires June 7, 2020		       [Page 39]
  2185
  2186	Internet-Draft		       LPWAN SCHC		   December 2019
  2187
  2188
  2189	   o  on receiving a SCHC Receiver-Abort, the fragment sender MAY exit
  2190	      with an error condition.
  2191
  2192	   o  on receiving a SCHC ACK that bears a W value different from the W
  2193	      value that it currently uses, the fragment sender MUST silently
  2194	      discard and ignore that SCHC ACK.
  2195
  2196	   Figure 39 shows an example of a corresponding state machine.
  2197
  2198	8.4.2.2.  Receiver behavior
  2199
  2200	   On receiving a SCHC Fragment with a Rule ID and DTag pair not being
  2201	   processed at that time
  2202
  2203	   o  the receiver SHOULD check if the DTag value has not recently been
  2204	      used for that Rule ID value, thereby ensuring that the received
  2205	      SCHC Fragment is not a remnant of a prior fragmented SCHC Packet
  2206	      transmission.  The initial value of the Inactivity Timer is the
  2207	      RECOMMENDED lifetime for the DTag value at the receiver.	If the
  2208	      SCHC Fragment is determined to be such a remnant, the receiver MAY
  2209	      silently ignore it and discard it.
  2210
  2211	   o  the receiver MUST start a process to assemble a new SCHC Packet
  2212	      with that Rule ID and DTag value pair.
  2213
  2214	   o  the receiver MUST start an Inactivity Timer for that RuleID and
  2215	      DTag pair.  It MUST initialize an Attempts counter to 0 for that
  2216	      RuleID and DTag pair.  It MUST initialize a window counter to 0.
  2217	      If the receiver is under-resourced to do this, it MUST respond to
  2218	      the sender with a SCHC Receiver Abort.
  2219
  2220	   In the rest of this section, "local W bit" means the least
  2221	   significant bit of the window counter of the receiver.
  2222
  2223	   On reception of any SCHC F/R message for the RuleID and DTag pair
  2224	   being processed, the receiver MUST reset the Inactivity Timer
  2225	   pertaining to that RuleID and DTag pair.
  2226
  2227	   All message receptions being discussed in the rest of this section
  2228	   are to be understood as "matching the RuleID and DTag pair being
  2229	   processed", even if not spelled out, for brevity.
  2230
  2231	   The receiver MUST first initialize an empty Bitmap for the first
  2232	   window, then enter an "acceptance phase", in which
  2233
  2234	   o  on receiving a SCHC Fragment or a SCHC ACK REQ, either one having
  2235	      the W bit different from the local W bit, the receiver MUST
  2236	      silently ignore and discard that message.
  2237
  2238
  2239
  2240	Minaburo, et al.	  Expires June 7, 2020		       [Page 40]
  2241
  2242	Internet-Draft		       LPWAN SCHC		   December 2019
  2243
  2244
  2245	   o  on receiving a SCHC ACK REQ with the W bit equal to the local W
  2246	      bit, the receiver MUST send a SCHC ACK for this window.
  2247
  2248	   o  on receiving a SCHC Fragment with the W bit equal to the local W
  2249	      bit, the receiver MUST assemble the received tile based on the
  2250	      window counter and on the FCN field in the SCHC Fragment and it
  2251	      MUST update the Bitmap.
  2252
  2253	      *  if the SCHC Fragment received is an All-0 SCHC Fragment, the
  2254		 current window is determined to be a not-last window, the
  2255		 receiver MUST send a SCHC ACK for this window and it MUST enter
  2256		 the "retransmission phase" for this window.
  2257
  2258	      *  if the SCHC Fragment received is an All-1 SCHC Fragment, the
  2259		 padding bits of the All-1 SCHC Fragment MUST be assembled after
  2260		 the received tile, the current window is determined to be the
  2261		 last window, the receiver MUST perform the integrity check and
  2262		 it MUST send a SCHC ACK for this window.  Then,
  2263
  2264		 +  If the integrity check indicates that the full SCHC Packet
  2265		    has been correctly reassembled, the receiver MUST enter the
  2266		    "clean-up phase" for this window.
  2267
  2268		 +  If the integrity check indicates that the full SCHC Packet
  2269		    has not been correctly reassembled, the receiver enters the
  2270		    "retransmission phase" for this window.
  2271
  2272	   In the "retransmission phase":
  2273
  2274	   o  if the window is a not-last window
  2275
  2276	      *  on receiving a SCHC Fragment that is not All-0 or All-1 and
  2277		 that has a W bit different from the local W bit, the receiver
  2278		 MUST increment its window counter and allocate a fresh Bitmap,
  2279		 it MUST assemble the tile received and update the Bitmap and it
  2280		 MUST enter the "acceptance phase" for that new window.
  2281
  2282	      *  on receiving a SCHC ACK REQ with a W bit different from the
  2283		 local W bit, the receiver MUST increment its window counter and
  2284		 allocate a fresh Bitmap, it MUST send a SCHC ACK for that new
  2285		 window and it MUST enter the "acceptance phase" for that new
  2286		 window.
  2287
  2288	      *  on receiving a SCHC All-0 Fragment with a W bit different from
  2289		 the local W bit, the receiver MUST increment its window counter
  2290		 and allocate a fresh Bitmap, it MUST assemble the tile received
  2291		 and update the Bitmap, it MUST send a SCHC ACK for that new
  2292
  2293
  2294
  2295
  2296	Minaburo, et al.	  Expires June 7, 2020		       [Page 41]
  2297
  2298	Internet-Draft		       LPWAN SCHC		   December 2019
  2299
  2300
  2301		 window and it MUST stay in the "retransmission phase" for that
  2302		 new window.
  2303
  2304	      *  on receiving a SCHC All-1 Fragment with a W bit different from
  2305		 the local W bit, the receiver MUST increment its window counter
  2306		 and allocate a fresh Bitmap, it MUST assemble the tile
  2307		 received, including the padding bits, it MUST update the Bitmap
  2308		 and perform the integrity check, it MUST send a SCHC ACK for
  2309		 the new window, which is determined to be the last window.
  2310		 Then,
  2311
  2312		 +  If the integrity check indicates that the full SCHC Packet
  2313		    has been correctly reassembled, the receiver MUST enter the
  2314		    "clean-up phase" for that new window.
  2315
  2316		 +  If the integrity check indicates that the full SCHC Packet
  2317		    has not been correctly reassembled, the receiver enters the
  2318		    "retransmission phase" for that new window.
  2319
  2320	      *  on receiving a SCHC Fragment with a W bit equal to the local W
  2321		 bit,
  2322
  2323		 +  if the SCHC Fragment received is an All-1 SCHC Fragment, the
  2324		    receiver MUST silently ignore it and discard it.
  2325
  2326		 +  otherwise, the receiver MUST assemble the tile received and
  2327		    update the Bitmap.	If the Bitmap becomes fully populated
  2328		    with 1's or if the SCHC Fragment is an All-0, the receiver
  2329		    MUST send a SCHC ACK for this window.
  2330
  2331	      *  on receiving a SCHC ACK REQ with the W bit equal to the local W
  2332		 bit, the receiver MUST send a SCHC ACK for this window.
  2333
  2334	   o  if the window is the last window
  2335
  2336	      *  on receiving a SCHC Fragment or a SCHC ACK REQ, either one
  2337		 having a W bit different from the local W bit, the receiver
  2338		 MUST silently ignore and discard that message.
  2339
  2340	      *  on receiving a SCHC ACK REQ with the W bit equal to the local W
  2341		 bit, the receiver MUST send a SCHC ACK for this window.
  2342
  2343	      *  on receiving a SCHC Fragment with a W bit equal to the local W
  2344		 bit,
  2345
  2346		 +  if the SCHC Fragment received is an All-0 SCHC Fragment, the
  2347		    receiver MUST silently ignore it and discard it.
  2348
  2349
  2350
  2351
  2352	Minaburo, et al.	  Expires June 7, 2020		       [Page 42]
  2353
  2354	Internet-Draft		       LPWAN SCHC		   December 2019
  2355
  2356
  2357		 +  otherwise, the receiver MUST update the Bitmap and it MUST
  2358		    assemble the tile received.  If the SCHC Fragment received
  2359		    is an All-1 SCHC Fragment, the receiver MUST assemble the
  2360		    padding bits of the All-1 SCHC Fragment after the received
  2361		    tile, it MUST perform the integrity check and
  2362
  2363		    -  if the integrity check indicates that the full SCHC
  2364		       Packet has been correctly reassembled, the receiver MUST
  2365		       send a SCHC ACK and it enters the "clean-up phase".
  2366
  2367		    -  if the integrity check indicates that the full SCHC
  2368		       Packet has not been correctly reassembled,
  2369
  2370		       o  if the SCHC Fragment received was an All-1 SCHC
  2371			  Fragment, the receiver MUST send a SCHC ACK for this
  2372			  window.
  2373
  2374	   In the "clean-up phase":
  2375
  2376	   o  On receiving an All-1 SCHC Fragment or a SCHC ACK REQ, either one
  2377	      having the W bit equal to the local W bit, the receiver MUST send
  2378	      a SCHC ACK.
  2379
  2380	   o  Any other SCHC Fragment received MUST be silently ignored and
  2381	      discarded.
  2382
  2383	   At any time, on sending a SCHC ACK, the receiver MUST increment the
  2384	   Attempts counter.
  2385
  2386	   At any time, on incrementing its window counter, the receiver MUST
  2387	   reset the Attempts counter.
  2388
  2389	   At any time, on expiration of the Inactivity Timer, on receiving a
  2390	   SCHC Sender-Abort or when Attempts reaches MAX_ACK_REQUESTS, the
  2391	   receiver MUST send a SCHC Receiver-Abort and it MAY exit the receive
  2392	   process for that SCHC Packet.
  2393
  2394	   Figure 40 shows an example of a corresponding state machine.
  2395
  2396	8.4.3.	ACK-on-Error mode
  2397
  2398	   The ACK-on-Error mode supports LPWAN technologies that have variable
  2399	   MTU and out-of-order delivery.  It operates with links that provide a
  2400	   feedback path from the reassembler to the fragmenter.  See Appendix F
  2401	   for a discussion on using ACK-on-Error mode on quasi-bidirectional
  2402	   links.
  2403
  2404	   In ACK-on-Error mode, windows are used.
  2405
  2406
  2407
  2408	Minaburo, et al.	  Expires June 7, 2020		       [Page 43]
  2409
  2410	Internet-Draft		       LPWAN SCHC		   December 2019
  2411
  2412
  2413	   All tiles, but the last one and the penultimate one, MUST be of equal
  2414	   size, hereafter called "regular".  The size of the last tile MUST be
  2415	   smaller than or equal to the regular tile size.  Regarding the
  2416	   penultimate tile, a Profile MUST pick one of the following two
  2417	   options:
  2418
  2419	   o  The penultimate tile size MUST be the regular tile size
  2420
  2421	   o  or the penultimate tile size MUST be either the regular tile size
  2422	      or the regular tile size minus one L2 Word.
  2423
  2424	   A SCHC Fragment message carries one or several contiguous tiles,
  2425	   which may span multiple windows.  A SCHC ACK reports on the reception
  2426	   of exactly one window of tiles.
  2427
  2428	   See Figure 23 for an example.
  2429
  2430		   +---------------------------------------------...-----------+
  2431		   |			   SCHC Packet			       |
  2432		   +---------------------------------------------...-----------+
  2433
  2434	  Tile #   | 4 | 3 | 2 | 1 | 0 | 4 | 3 | 2 | 1 | 0 | 4 |     | 0 | 4 |3|
  2435	  Window # |-------- 0 --------|-------- 1 --------|- 2  ... 27 -|- 28-|
  2436
  2437
  2438	  SCHC Fragment msg    |-----------|
  2439
  2440	      Figure 23: a SCHC Packet fragmented in tiles, ACK-on-Error mode
  2441
  2442	   The W field is wide enough that it unambiguously represents an
  2443	   absolute window number.  The fragment receiver sends SCHC ACKs to the
  2444	   fragment sender about windows for which tiles are missing.  No SCHC
  2445	   ACK is sent by the fragment receiver for windows that it knows have
  2446	   been fully received.
  2447
  2448	   The fragment sender retransmits SCHC Fragments for tiles that are
  2449	   reported missing.  It can advance to next windows even before it has
  2450	   ascertained that all tiles belonging to previous windows have been
  2451	   correctly received, and can still later retransmit SCHC Fragments
  2452	   with tiles belonging to previous windows.  Therefore, the sender and
  2453	   the receiver may operate in a decoupled fashion.  The fragmented SCHC
  2454	   Packet transmission concludes when
  2455
  2456	   o  integrity checking shows that the fragmented SCHC Packet has been
  2457	      correctly reassembled at the receive end, and this information has
  2458	      been conveyed back to the sender,
  2459
  2460	   o  or too many retransmission attempts were made,
  2461
  2462
  2463
  2464	Minaburo, et al.	  Expires June 7, 2020		       [Page 44]
  2465
  2466	Internet-Draft		       LPWAN SCHC		   December 2019
  2467
  2468
  2469	   o  or the receiver determines that the transmission of this
  2470	      fragmented SCHC Packet has been inactive for too long.
  2471
  2472	   Each Profile MUST specify which Rule ID value(s) correspond to SCHC
  2473	   F/R messages operating in this mode.
  2474
  2475	   The W field MUST be present in the SCHC F/R messages.
  2476
  2477	   Each Profile, for each Rule ID value, MUST define
  2478
  2479	   o  the tile size (a tile does not need to be multiple of an L2 Word,
  2480	      but it MUST be at least the size of an L2 Word)
  2481
  2482	   o  the value of M (size of the W field),
  2483
  2484	   o  the value of N (size of the FCN field),
  2485
  2486	   o  the value of WINDOW_SIZE, which MUST be strictly less than 2^N,
  2487
  2488	   o  the size and algorithm for the RCS field,
  2489
  2490	   o  the size of the DTag field,
  2491
  2492	   o  the value of MAX_ACK_REQUESTS,
  2493
  2494	   o  the expiration time of the Retransmission Timer
  2495
  2496	   o  the expiration time of the Inactivity Timer
  2497
  2498	   o  whether the last tile is carried in a Regular SCHC Fragment or an
  2499	      All-1 SCHC Fragment (see Section 8.4.3.1)
  2500
  2501	   o  if the penultimate tile MAY be one L2 Word smaller than the
  2502	      regular tile size.  In this case, the regular tile size MUST be at
  2503	      least twice the L2 Word size.
  2504
  2505	   For each active pair of Rule ID and DTag values, the sender MUST
  2506	   maintain
  2507
  2508	   o  one Attempts counter
  2509
  2510	   o  one Retransmission Timer
  2511
  2512	   For each active pair of Rule ID and DTag values, the receiver MUST
  2513	   maintain
  2514
  2515	   o  one Inactivity Timer
  2516
  2517
  2518
  2519
  2520	Minaburo, et al.	  Expires June 7, 2020		       [Page 45]
  2521
  2522	Internet-Draft		       LPWAN SCHC		   December 2019
  2523
  2524
  2525	   o  one Attempts counter
  2526
  2527	8.4.3.1.  Sender behavior
  2528
  2529	   At the beginning of the fragmentation of a new SCHC Packet,
  2530
  2531	   o  the fragment sender MUST select a Rule ID and DTag value pair for
  2532	      this SCHC Packet.  A Rule MUST NOT be selected if the values of M
  2533	      and WINDOW_SIZE for that Rule are such that the SCHC Packet cannot
  2534	      be fragmented in (2^M) * WINDOW_SIZE tiles or less.
  2535
  2536	   o  the fragment sender MUST initialize the Attempts counter to 0 for
  2537	      that Rule ID and DTag value pair.
  2538
  2539	   A Regular SCHC Fragment message carries in its payload one or more
  2540	   tiles.  If more than one tile is carried in one Regular SCHC Fragment
  2541
  2542	   o  the selected tiles MUST be contiguous in the original SCHC Packet
  2543
  2544	   o  they MUST be placed in the SCHC Fragment Payload adjacent to one
  2545	      another, in the order they appear in the SCHC Packet, from the
  2546	      start of the SCHC Packet toward its end.
  2547
  2548	   Tiles that are not the last one MUST be sent in Regular SCHC
  2549	   Fragments specified in Section 8.3.1.1.  The FCN field MUST contain
  2550	   the tile index of the first tile sent in that SCHC Fragment.
  2551
  2552	   In a Regular SCHC Fragment message, the sender MUST fill the W field
  2553	   with the window number of the first tile sent in that SCHC Fragment.
  2554
  2555	   Depending on the Profile, the last tile of a SCHC Packet MUST be sent
  2556	   either
  2557
  2558	   o  in a Regular SCHC Fragment, alone or as part of a multi-tiles
  2559	      Payload
  2560
  2561	   o  alone in an All-1 SCHC Fragment
  2562
  2563	   In an All-1 SCHC Fragment message, the sender MUST fill the W field
  2564	   with the window number of the last tile of the SCHC Packet.
  2565
  2566	   The fragment sender MUST send SCHC Fragments such that, all together,
  2567	   they contain all the tiles of the fragmented SCHC Packet.
  2568
  2569	   The fragment sender MUST send at least one All-1 SCHC Fragment.
  2570
  2571	   The fragment sender MUST listen for SCHC ACK messages after having
  2572	   sent
  2573
  2574
  2575
  2576	Minaburo, et al.	  Expires June 7, 2020		       [Page 46]
  2577
  2578	Internet-Draft		       LPWAN SCHC		   December 2019
  2579
  2580
  2581	   o  an All-1 SCHC Fragment
  2582
  2583	   o  or a SCHC ACK REQ.
  2584
  2585	   A Profile MAY specify other times at which the fragment sender MUST
  2586	   listen for SCHC ACK messages.  For example, this could be after
  2587	   sending a complete window of tiles.
  2588
  2589	   Each time a fragment sender sends an All-1 SCHC Fragment or a SCHC
  2590	   ACK REQ,
  2591
  2592	   o  it MUST increment the Attempts counter
  2593
  2594	   o  it MUST reset the Retransmission Timer
  2595
  2596	   On Retransmission Timer expiration
  2597
  2598	   o  if Attempts is strictly less than MAX_ACK_REQUESTS, the fragment
  2599	      sender MUST send either the All-1 SCHC Fragment or a SCHC ACK REQ
  2600	      with the W field corresponding to the last window,
  2601
  2602	   o  otherwise the fragment sender MUST send a SCHC Sender-Abort and it
  2603	      MAY exit with an error condition.
  2604
  2605	   All message receptions being discussed in the rest of this section
  2606	   are to be understood as "matching the RuleID and DTag pair being
  2607	   processed", even if not spelled out, for brevity.
  2608
  2609	   On receiving a SCHC ACK,
  2610
  2611	   o  if the W field in the SCHC ACK corresponds to the last window of
  2612	      the SCHC Packet,
  2613
  2614	      *  if the C bit is set, the sender MAY exit successfully
  2615
  2616	      *  otherwise,
  2617
  2618		 +  if the Profile mandates that the last tile be sent in an
  2619		    All-1 SCHC Fragment,
  2620
  2621		    -  if the SCHC ACK shows no missing tile at the receiver,
  2622		       the sender
  2623
  2624		       o  MUST send a SCHC Sender-Abort
  2625
  2626		       o  MAY exit with an error condition
  2627
  2628		    -  otherwise
  2629
  2630
  2631
  2632	Minaburo, et al.	  Expires June 7, 2020		       [Page 47]
  2633
  2634	Internet-Draft		       LPWAN SCHC		   December 2019
  2635
  2636
  2637		       o  the fragment sender MUST send SCHC Fragment messages
  2638			  containing all the tiles that are reported missing in
  2639			  the SCHC ACK.
  2640
  2641		       o  if the last of these SCHC Fragment messages is not an
  2642			  All-1 SCHC Fragment, then the fragment sender MUST in
  2643			  addition send after it a SCHC ACK REQ with the W field
  2644			  corresponding to the last window.
  2645
  2646		 +  otherwise,
  2647
  2648		    -  if the SCHC ACK shows no missing tile at the receiver,
  2649		       the sender MUST send the All-1 SCHC Fragment
  2650
  2651		    -  otherwise
  2652
  2653		       o  the fragment sender MUST send SCHC Fragment messages
  2654			  containing all the tiles that are reported missing in
  2655			  the SCHC ACK.
  2656
  2657		       o  the fragment sender MUST then send either the All-1
  2658			  SCHC Fragment or a SCHC ACK REQ with the W field
  2659			  corresponding to the last window.
  2660
  2661	   o  otherwise, the fragment sender
  2662
  2663	      *  MUST send SCHC Fragment messages containing the tiles that are
  2664		 reported missing in the SCHC ACK
  2665
  2666	      *  then it MAY send a SCHC ACK REQ with the W field corresponding
  2667		 to the last window
  2668
  2669	   See Figure 41 for one among several possible examples of a Finite
  2670	   State Machine implementing a sender behavior obeying this
  2671	   specification.
  2672
  2673	8.4.3.2.  Receiver behavior
  2674
  2675	   On receiving a SCHC Fragment with a Rule ID and DTag pair not being
  2676	   processed at that time
  2677
  2678	   o  the receiver SHOULD check if the DTag value has not recently been
  2679	      used for that Rule ID value, thereby ensuring that the received
  2680	      SCHC Fragment is not a remnant of a prior fragmented SCHC Packet
  2681	      transmission.  The initial value of the Inactivity Timer is the
  2682	      RECOMMENDED lifetime for the DTag value at the receiver.	If the
  2683	      SCHC Fragment is determined to be such a remnant, the receiver MAY
  2684	      silently ignore it and discard it.
  2685
  2686
  2687
  2688	Minaburo, et al.	  Expires June 7, 2020		       [Page 48]
  2689
  2690	Internet-Draft		       LPWAN SCHC		   December 2019
  2691
  2692
  2693	   o  the receiver MUST start a process to assemble a new SCHC Packet
  2694	      with that Rule ID and DTag value pair.  The receiver MUST start an
  2695	      Inactivity Timer for that Rule ID and DTag value pair.  It MUST
  2696	      initialize an Attempts counter to 0 for that Rule ID and DTag
  2697	      value pair.  If the receiver is under-resourced to do this, it
  2698	      MUST respond to the sender with a SCHC Receiver Abort.
  2699
  2700	   On reception of any SCHC F/R message for the RuleID and DTag pair
  2701	   being processed, the receiver MUST reset the Inactivity Timer
  2702	   pertaining to that RuleID and DTag pair.
  2703
  2704	   All message receptions being discussed in the rest of this section
  2705	   are to be understood as "matching the RuleID and DTag pair being
  2706	   processed", even if not spelled out, for brevity.
  2707
  2708	   On receiving a SCHC Fragment message, the receiver determines what
  2709	   tiles were received, based on the payload length and on the W and FCN
  2710	   fields of the SCHC Fragment.
  2711
  2712	   o  if the FCN is All-1, if a Payload is present, the full SCHC
  2713	      Fragment Payload MUST be assembled including the padding bits.
  2714	      This is because the size of the last tile is not known by the
  2715	      receiver, therefore padding bits are indistinguishable from the
  2716	      tile data bits, at this stage.  They will be removed by the SCHC
  2717	      C/D sublayer.  If the size of the SCHC Fragment Payload exceeds or
  2718	      equals the size of one regular tile plus the size of an L2 Word,
  2719	      this SHOULD raise an error flag.
  2720
  2721	   o  otherwise, tiles MUST be assembled based on the a priori known
  2722	      tile size.
  2723
  2724	      *  If allowed by the Profile, the end of the payload MAY contain
  2725		 the last tile, which may be shorter.  Padding bits are
  2726		 indistinguishable from the tile data bits, at this stage.
  2727
  2728	      *  the payload may contain the penultimate tile that, if allowed
  2729		 by the Profile, MAY be exactly one L2 Word shorter than the
  2730		 regular tile size.
  2731
  2732	      *  Otherwise, padding bits MUST be discarded.  The latter is
  2733		 possible because
  2734
  2735		 +  the size of the tiles is known a priori,
  2736
  2737		 +  tiles are larger than an L2 Word
  2738
  2739		 +  padding bits are always strictly less than an L2 Word
  2740
  2741
  2742
  2743
  2744	Minaburo, et al.	  Expires June 7, 2020		       [Page 49]
  2745
  2746	Internet-Draft		       LPWAN SCHC		   December 2019
  2747
  2748
  2749	   On receiving a SCHC ACK REQ or an All-1 SCHC Fragment,
  2750
  2751	   o  if the receiver knows of any windows with missing tiles for the
  2752	      packet being reassembled, it MUST return a SCHC ACK for the
  2753	      lowest-numbered such window,
  2754
  2755	   o  otherwise,
  2756
  2757	      *  if it has received at least one tile, it MUST return a SCHC ACK
  2758		 for the highest-numbered window it currently has tiles for
  2759
  2760	      *  otherwise it MUST return a SCHC ACK for window numbered 0
  2761
  2762	   A Profile MAY specify other times and circumstances at which a
  2763	   receiver sends a SCHC ACK, and which window the SCHC ACK reports
  2764	   about in these circumstances.
  2765
  2766	   Upon sending a SCHC ACK, the receiver MUST increase the Attempts
  2767	   counter.
  2768
  2769	   After receiving an All-1 SCHC Fragment, a receiver MUST check the
  2770	   integrity of the reassembled SCHC Packet at least every time it
  2771	   prepares for sending a SCHC ACK for the last window.
  2772
  2773	   Upon receiving a SCHC Sender-Abort, the receiver MAY exit with an
  2774	   error condition.
  2775
  2776	   Upon expiration of the Inactivity Timer, the receiver MUST send a
  2777	   SCHC Receiver-Abort and it MAY exit with an error condition.
  2778
  2779	   On the Attempts counter exceeding MAX_ACK_REQUESTS, the receiver MUST
  2780	   send a SCHC Receiver-Abort and it MAY exit with an error condition.
  2781
  2782	   Reassembly of the SCHC Packet concludes when
  2783
  2784	   o  a Sender-Abort has been received
  2785
  2786	   o  or the Inactivity Timer has expired
  2787
  2788	   o  or the Attempts counter has exceeded MAX_ACK_REQUESTS
  2789
  2790	   o  or when at least an All-1 SCHC Fragment has been received and
  2791	      integrity checking of the reassembled SCHC Packet is successful.
  2792
  2793	   See Figure 42 for one among several possible examples of a Finite
  2794	   State Machine implementing a receiver behavior obeying this
  2795	   specification, and that is meant to match the sender Finite State
  2796	   Machine of Figure 41.
  2797
  2798
  2799
  2800	Minaburo, et al.	  Expires June 7, 2020		       [Page 50]
  2801
  2802	Internet-Draft		       LPWAN SCHC		   December 2019
  2803
  2804
  2805	9.  Padding management
  2806
  2807	   SCHC C/D and SCHC F/R operate on bits, not bytes.  SCHC itself does
  2808	   not have any alignment prerequisite.  The size of SCHC Packets can be
  2809	   any number of bits.
  2810
  2811	   If the layer below SCHC constrains the payload to align to some
  2812	   boundary, called L2 Words (for example, bytes), the SCHC messages
  2813	   MUST be padded.  When padding occurs, the number of appended bits
  2814	   MUST be strictly less than the L2 Word size.
  2815
  2816	   If a SCHC Packet is sent unfragmented (see Figure 24), it is padded
  2817	   as needed for transmission.
  2818
  2819	   If a SCHC Packet needs to be fragmented for transmission, it is not
  2820	   padded in itself.  Only the SCHC F/R messages are padded as needed
  2821	   for transmission.  Some SCHC F/R messages are intrinsically aligned
  2822	   to L2 Words.
  2823
  2824	   A packet (e.g., an IPv6 packet)
  2825		    |						^ (padding bits
  2826		    v						|	dropped)
  2827	   +------------------+ 		     +--------------------+
  2828	   | SCHC Compression | 		     | SCHC Decompression |
  2829	   +------------------+ 		     +--------------------+
  2830		    |						^
  2831		    |	If no fragmentation			|
  2832		    +---- SCHC Packet + padding as needed ----->|
  2833		    |						| (integrity
  2834		    v						|  checked)
  2835	   +--------------------+			+-----------------+
  2836	   | SCHC Fragmentation |			| SCHC Reassembly |
  2837	   +--------------------+			+-----------------+
  2838		|	^				    |	    ^
  2839		|	|				    |	    |
  2840		|	+--- SCHC ACK + padding as needed --+	    |
  2841		|						    |
  2842		+------- SCHC Fragments + padding as needed---------+
  2843
  2844		   Sender				     Receiver
  2845
  2846
  2847
  2848		  Figure 24: SCHC operations, including padding as needed
  2849
  2850	   Each Profile MUST specify the size of the L2 Word.  The L2 Word might
  2851	   actually be a single bit, in which case no padding will take place at
  2852	   all.
  2853
  2854
  2855
  2856	Minaburo, et al.	  Expires June 7, 2020		       [Page 51]
  2857
  2858	Internet-Draft		       LPWAN SCHC		   December 2019
  2859
  2860
  2861	   A Profile MAY define the value of the padding bits.	The RECOMMENDED
  2862	   value is 0.
  2863
  2864	10.  SCHC Compression for IPv6 and UDP headers
  2865
  2866	   This section lists the IPv6 and UDP header fields and describes how
  2867	   they can be compressed.  An example of a set of Rules for UDP/IPv6
  2868	   header compression is provided in Appendix A.
  2869
  2870	10.1.  IPv6 version field
  2871
  2872	   The IPv6 version field is labeled by the protocol parser as being the
  2873	   "version" field of the IPv6 protocol.  Therefore, it only exists for
  2874	   IPv6 packets.  In the Rule, TV is set to 6, MO to "ignore" and CDA to
  2875	   "not-sent".
  2876
  2877	10.2.  IPv6 Traffic class field
  2878
  2879	   If the DiffServ field does not vary and is known by both sides, the
  2880	   Field Descriptor in the Rule SHOULD contain a TV with this well-known
  2881	   value, an "equal" MO and a "not-sent" CDA.
  2882
  2883	   Otherwise (e.g., ECN bits are to be transmitted), two possibilities
  2884	   can be considered depending on the variability of the value:
  2885
  2886	   o  One possibility is to not compress the field and send the original
  2887	      value.  In the Rule, TV is not set to any particular value, MO is
  2888	      set to "ignore" and CDA is set to "value-sent".
  2889
  2890	   o  If some upper bits in the field are constant and known, a better
  2891	      option is to only send the LSBs.	In the Rule, TV is set to a
  2892	      value with the stable known upper part, MO is set to MSB(x) and
  2893	      CDA to LSB.
  2894
  2895	      ECN functionality depends on both bits of the ECN field, which are
  2896	      the 2 LSBs of this field, hence sending only a single LSB of this
  2897	      field is NOT RECOMMENDED.
  2898
  2899	10.3.  Flow label field
  2900
  2901	   If the flow label is not set, i.e. its value is zero, the Field
  2902	   Descriptor in the Rule SHOULD contain a TV set to zero, an "equal" MO
  2903	   and a "not-sent" CDA.
  2904
  2905	   If the flow label is set to a pseudo-random value according to
  2906	   [RFC6437], in the Rule, TV is not set to any particular value, MO is
  2907	   set to "ignore" and CDA is set to "value-sent".
  2908
  2909
  2910
  2911
  2912	Minaburo, et al.	  Expires June 7, 2020		       [Page 52]
  2913
  2914	Internet-Draft		       LPWAN SCHC		   December 2019
  2915
  2916
  2917	   If the flow label is set according to some prior agreement, i.e. by a
  2918	   flow state establishment method as allowed by [RFC6437], the Field
  2919	   Descriptor in the Rule SHOULD contain a TV with this agreed-upon
  2920	   value, an "equal" MO and a "not-sent" CDA.
  2921
  2922	10.4.  Payload Length field
  2923
  2924	   This field can be elided for the transmission on the LPWAN network.
  2925	   The SCHC C/D recomputes the original payload length value.  In the
  2926	   Field Descriptor, TV is not set, MO is set to "ignore" and CDA is
  2927	   "compute-*".
  2928
  2929	10.5.  Next Header field
  2930
  2931	   If the Next Header field does not vary and is known by both sides,
  2932	   the Field Descriptor in the Rule SHOULD contain a TV with this Next
  2933	   Header value, the MO SHOULD be "equal" and the CDA SHOULD be "not-
  2934	   sent".
  2935
  2936	   Otherwise, TV is not set in the Field Descriptor, MO is set to
  2937	   "ignore" and CDA is set to "value-sent".  Alternatively, a matching-
  2938	   list MAY also be used.
  2939
  2940	10.6.  Hop Limit field
  2941
  2942	   The field behavior for this field is different for uplink (Up) and
  2943	   downlink (Dw).  In Up, since there is no IP forwarding between the
  2944	   Dev and the SCHC C/D, the value is relatively constant.  On the other
  2945	   hand, the Dw value depends on Internet routing and can change more
  2946	   frequently.	The Direction Indicator (DI) can be used to distinguish
  2947	   both directions:
  2948
  2949	   o  in the Up, elide the field: the TV in the Field Descriptor is set
  2950	      to the known constant value, the MO is set to "equal" and the CDA
  2951	      is set to "not-sent".
  2952
  2953	   o  in the Dw, the Hop Limit is elided for transmission and forced to
  2954	      1 at the receiver, by setting TV to 1, MO to "ignore" and CDA to
  2955	      "not-sent".  This prevents any further forwarding.
  2956
  2957	10.7.  IPv6 addresses fields
  2958
  2959	   As in 6LoWPAN [RFC4944], IPv6 addresses are split into two 64-bit
  2960	   long fields; one for the prefix and one for the Interface Identifier
  2961	   (IID).  These fields SHOULD be compressed.  To allow for a single
  2962	   Rule being used for both directions, these values are identified by
  2963	   their role (Dev or App) and not by their position in the header
  2964	   (source or destination).
  2965
  2966
  2967
  2968	Minaburo, et al.	  Expires June 7, 2020		       [Page 53]
  2969
  2970	Internet-Draft		       LPWAN SCHC		   December 2019
  2971
  2972
  2973	10.7.1.  IPv6 source and destination prefixes
  2974
  2975	   Both ends MUST be configured with the appropriate prefixes.	For a
  2976	   specific flow, the source and destination prefixes can be unique and
  2977	   stored in the Context.  In that case, the TV for the source and
  2978	   destination prefixes contain the values, the MO is set to "equal" and
  2979	   the CDA is set to "not-sent".
  2980
  2981	   If the Rule is intended to compress packets with different prefix
  2982	   values, match-mapping SHOULD be used.  The different prefixes are
  2983	   listed in the TV, the MO is set to "match-mapping" and the CDA is set
  2984	   to "mapping-sent".  See Figure 26.
  2985
  2986	   Otherwise, the TV is not set, the MO is set to "ignore" and the CDA
  2987	   is set to "value-sent".
  2988
  2989	10.7.2.  IPv6 source and destination IID
  2990
  2991	   If the Dev or App IID are based on an LPWAN address, then the IID can
  2992	   be reconstructed with information coming from the LPWAN header.  In
  2993	   that case, the TV is not set, the MO is set to "ignore" and the CDA
  2994	   is set to "DevIID" or "AppIID".  On LPWAN technologies where the
  2995	   frames carry a single identifier (corresponding to the Dev.), AppIID
  2996	   cannot be used.
  2997
  2998	   As described in [RFC8065], it may be undesirable to build the Dev
  2999	   IPv6 IID out of the Dev address.  Another static value is used
  3000	   instead.  In that case, the TV contains the static value, the MO
  3001	   operator is set to "equal" and the CDA is set to "not-sent".
  3002
  3003	   If several IIDs are possible, then the TV contains the list of
  3004	   possible IIDs, the MO is set to "match-mapping" and the CDA is set to
  3005	   "mapping-sent".
  3006
  3007	   It may also happen that the IID variability only expresses itself on
  3008	   a few bytes.  In that case, the TV is set to the stable part of the
  3009	   IID, the MO is set to "MSB" and the CDA is set to "LSB".
  3010
  3011	   Finally, the IID can be sent in its entirety on the LPWAN.  In that
  3012	   case, the TV is not set, the MO is set to "ignore" and the CDA is set
  3013	   to "value-sent".
  3014
  3015	10.8.  IPv6 extension headers
  3016
  3017	   This document does not provide recommendations on how to compress
  3018	   IPv6 extension headers.
  3019
  3020
  3021
  3022
  3023
  3024	Minaburo, et al.	  Expires June 7, 2020		       [Page 54]
  3025
  3026	Internet-Draft		       LPWAN SCHC		   December 2019
  3027
  3028
  3029	10.9.  UDP source and destination ports
  3030
  3031	   To allow for a single Rule being used for both directions, the UDP
  3032	   port values are identified by their role (Dev or App) and not by
  3033	   their position in the header (source or destination).  The SCHC C/D
  3034	   MUST be aware of the traffic direction (Uplink, Downlink) to select
  3035	   the appropriate field.  The following Rules apply for Dev and App
  3036	   port numbers.
  3037
  3038	   If both ends know the port number, it can be elided.  The TV contains
  3039	   the port number, the MO is set to "equal" and the CDA is set to "not-
  3040	   sent".
  3041
  3042	   If the port variation is on few bits, the TV contains the stable part
  3043	   of the port number, the MO is set to "MSB" and the CDA is set to
  3044	   "LSB".
  3045
  3046	   If some well-known values are used, the TV can contain the list of
  3047	   these values, the MO is set to "match-mapping" and the CDA is set to
  3048	   "mapping-sent".
  3049
  3050	   Otherwise the port numbers are sent over the LPWAN.	The TV is not
  3051	   set, the MO is set to "ignore" and the CDA is set to "value-sent".
  3052
  3053	10.10.	UDP length field
  3054
  3055	   The UDP length can be computed from the received data.  The TV is not
  3056	   set, the MO is set to "ignore" and the CDA is set to "compute-*".
  3057
  3058	10.11.	UDP Checksum field
  3059
  3060	   The UDP checksum operation is mandatory with IPv6 for most packets
  3061	   but there are exceptions [RFC8200].
  3062
  3063	   For instance, protocols that use UDP as a tunnel encapsulation may
  3064	   enable zero-checksum mode for a specific port (or set of ports) for
  3065	   sending and/or receiving.  [RFC8200] requires any node implementing
  3066	   zero-checksum mode to follow the requirements specified in
  3067	   "Applicability Statement for the Use of IPv6 UDP Datagrams with Zero
  3068	   Checksums" [RFC6936].
  3069
  3070	   6LoWPAN Header Compression [RFC6282] also specifies that a UDP
  3071	   checksum can be elided by the compressor and re-computed by the
  3072	   decompressor when an upper layer guarantees the integrity of the UDP
  3073	   payload and pseudo-header.  A specific example of this is when a
  3074	   message integrity check protects the compressed message between the
  3075	   compressor that elides the UDP checksum and the decompressor that
  3076
  3077
  3078
  3079
  3080	Minaburo, et al.	  Expires June 7, 2020		       [Page 55]
  3081
  3082	Internet-Draft		       LPWAN SCHC		   December 2019
  3083
  3084
  3085	   computes it, with a strength that is identical or better to the UDP
  3086	   checksum.
  3087
  3088	   Similarly, a SCHC compressor MAY elide the UDP checksum when another
  3089	   layer guarantees at least equal integrity protection for the UDP
  3090	   payload and the pseudo-header.  In this case, the TV is not set, the
  3091	   MO is set to "ignore" and the CDA is set to "compute-*".
  3092
  3093	   In particular, when SCHC fragmentation is used, a fragmentation RCS
  3094	   of 2 bytes or more provides equal or better protection than the UDP
  3095	   checksum; in that case, if the compressor is collocated with the
  3096	   fragmentation point and the decompressor is collocated with the
  3097	   packet reassembly point, and if the SCHC Packet is fragmented even
  3098	   when it would fit unfragmented in the L2 MTU, then the compressor MAY
  3099	   verify and then elide the UDP checksum.  Whether and when the UDP
  3100	   Checksum is elided is to be specified in the Profile.
  3101
  3102	   Since the compression happens before the fragmentation, implementers
  3103	   should understand the risks when dealing with unprotected data below
  3104	   the transport layer and take special care when manipulating that
  3105	   data.
  3106
  3107	   In other cases, the checksum SHOULD be explicitly sent.  The TV is
  3108	   not set, the MO is set to "ignore" and the CDA is set to "value-
  3109	   sent".
  3110
  3111	11.  IANA Considerations
  3112
  3113	   This document has no request to IANA.
  3114
  3115	12.  Security considerations
  3116
  3117	   As explained in Section 5, SCHC is expected to be implemented on top
  3118	   of LPWAN technologies, which are expected to implement security
  3119	   measures.
  3120
  3121	   In this section, we analyze the potential security threats that could
  3122	   be introduced into an LPWAN by adding the SCHC functionalities.
  3123
  3124	12.1.  Security considerations for SCHC Compression/Decompression
  3125
  3126	12.1.1.  Forged SCHC Packet
  3127
  3128	   Let's assume that an attacker is able to send a forged SCHC Packet to
  3129	   a SCHC Decompressor.
  3130
  3131	   Let's first consider the case where the Rule ID contained in that
  3132	   forged SCHC Packet does not correspond to a Rule allocated in the
  3133
  3134
  3135
  3136	Minaburo, et al.	  Expires June 7, 2020		       [Page 56]
  3137
  3138	Internet-Draft		       LPWAN SCHC		   December 2019
  3139
  3140
  3141	   Rule table.	An implementation should detect that the Rule ID is
  3142	   invalid and should silently drop the offending SCHC Packet.
  3143
  3144	   Let's now consider that the Rule ID corresponds to a Rule in the
  3145	   table.  With the CDAs defined in this document, the reconstructed
  3146	   packet is at most a constant number of bits bigger than the SCHC
  3147	   Packet that was received.  This assumes that the compute-*
  3148	   decompression actions produce a bounded number of bits, irrespective
  3149	   of the incoming SCHC Packet.  This property is true for IPv6 Length,
  3150	   UDP Length and UDP Checksum, for which the compute-* CDA is
  3151	   recommended by this document.
  3152
  3153	   As a consequence, SCHC Decompression does not amplify attacks, beyond
  3154	   adding a bounded number of bits to the SCHC Packet received.  This
  3155	   bound is determined by the Rule stored in the receiving device.
  3156
  3157	   As a general safety measure, a SCHC Decompressor should never re-
  3158	   construct a packet larger than MAX_PACKET_SIZE (defined in a Profile,
  3159	   with 1500 bytes as generic default).
  3160
  3161	12.1.2.  Compressed packet size as a side channel to guess a secret
  3162		 token
  3163
  3164	   Some packet compression methods are known to be susceptible to
  3165	   attacks, such as BREACH and CRIME.  The attack involves injecting
  3166	   arbitrary data into the packet and observing the resulting compressed
  3167	   packet size.  The observed size potentially reflects correlation
  3168	   between the arbitrary data and some content that was meant to remain
  3169	   secret, such as a security token, thereby allowing the attacker to
  3170	   get at the secret.
  3171
  3172	   By contrast, SCHC Compression takes place header field by header
  3173	   field, with the SCHC Packet being a mere concatenation of the
  3174	   compression residues of each of the individual field.  Any
  3175	   correlation between header fields does not result in a change in the
  3176	   SCHC Packet size compressed under the same Rule.
  3177
  3178	   If SCHC C/D is used to compress packets that include a secret
  3179	   information field, such as a token, the Rule set should be designed
  3180	   so that the size of the compression residue for the field to remain
  3181	   secret is the same irrespective of the value of the secret
  3182	   information.  This is achieved by e.g., sending this field in extenso
  3183	   with the "ignore" MO and the "value-sent" CDA.  This recommendation
  3184	   is disputable if it is ascertained that the Rule set itself will
  3185	   remain secret.
  3186
  3187
  3188
  3189
  3190
  3191
  3192	Minaburo, et al.	  Expires June 7, 2020		       [Page 57]
  3193
  3194	Internet-Draft		       LPWAN SCHC		   December 2019
  3195
  3196
  3197	12.1.3.  Decompressed packet different from the original packet
  3198
  3199	   As explained in Section 7.3, using FPs with value 0 in Field
  3200	   Descriptors in a Rule may result in header fields appearing in the
  3201	   decompressed packet in an order different from that in the original
  3202	   packet.  Likewise, as stated in Section 7.5.3, using an "ignore" MO
  3203	   together with a "not-sent" CDA will result in the header field taking
  3204	   the TV value, which is likely to be different from the original
  3205	   value.
  3206
  3207	   Depending on the protocol, the order of header fields in the packet
  3208	   may be functionally significant or not.
  3209
  3210	   Furthermore, if the packet is protected by a checksum or a similar
  3211	   integrity protection mechanism, and if the checksum is transmitted
  3212	   instead of being recomputed as part of the decompression, these
  3213	   situations may result in the packet being considered corrupt and
  3214	   dropped.
  3215
  3216	12.2.  Security considerations for SCHC Fragmentation/Reassembly
  3217
  3218	12.2.1.  Buffer reservation attack
  3219
  3220	   Let's assume that an attacker is able to send a forged SCHC Fragment
  3221	   to a SCHC Reassembler.
  3222
  3223	   A node can perform a buffer reservation attack: the receiver will
  3224	   reserve buffer space for the SCHC Packet.  If the implementation has
  3225	   only one buffer, other incoming fragmented SCHC Packets will be
  3226	   dropped while the reassembly buffer is occupied during the reassembly
  3227	   timeout.  Once that timeout expires, the attacker can repeat the same
  3228	   procedure, and iterate, thus creating a denial of service attack.  An
  3229	   implementation may have multiple reassembly buffers.  The cost to
  3230	   mount this attack is linear with the number of buffers at the target
  3231	   node.  Better, the cost for an attacker can be increased if
  3232	   individual fragments of multiple SCHC Packets can be stored in the
  3233	   reassembly buffer.  The finer grained the reassembly buffer (downto
  3234	   the smallest tile size), the higher the cost of the attack.	If
  3235	   buffer overload does occur, a smart receiver could selectively
  3236	   discard SCHC Packets being reassembled based on the sender behavior,
  3237	   which may help identify which SCHC Fragments have been sent by the
  3238	   attacker.  Another mild counter-measure is for the target to abort
  3239	   the fragmentation/reassembly session as early as it detects a non-
  3240	   identical SCHC Fragment duplicate, anticipating for an eventual
  3241	   corrupt SCHC Packet, so as to save the sender the hassle of sending
  3242	   the rest of the fragments for this SCHC Packet.
  3243
  3244
  3245
  3246
  3247
  3248	Minaburo, et al.	  Expires June 7, 2020		       [Page 58]
  3249
  3250	Internet-Draft		       LPWAN SCHC		   December 2019
  3251
  3252
  3253	12.2.2.  Corrupt Fragment attack
  3254
  3255	   Let's assume that an attacker is able to send a forged SCHC Fragment
  3256	   to a SCHC Reassembler.  The malicious node is additionally assumed to
  3257	   be able to hear an incoming communication destined to the target
  3258	   node.
  3259
  3260	   It can then send a forged SCHC Fragment that looks like it belongs to
  3261	   a SCHC Packet already being reassembled at the target node.	This can
  3262	   cause the SCHC Packet to be considered corrupt and be dropped by the
  3263	   receiver.  The amplification happens here by a single spoofed SCHC
  3264	   Fragment rendering a full sequence of legit SCHC Fragments useless.
  3265	   If the target uses ACK-Always or ACK-on-Error mode, such a malicious
  3266	   node can also interfere with the acknowledgement and repetition
  3267	   algorithm of SCHC F/R.  A single spoofed ACK, with all bitmap bits
  3268	   set to 0, will trigger the repetition of WINDOW_SIZE tiles.	This
  3269	   protocol loop amplification depletes the energy source of the target
  3270	   node and consumes the channel bandwidth.  Similarly, a spoofed ACK
  3271	   REQ will trigger the sending of a SCHC ACK, which may be much larger
  3272	   than the ACK REQ if WINDOW_SIZE is large.  These consequences should
  3273	   be borne in mind when defining profiles for SCHC over specific LPWAN
  3274	   technologies.
  3275
  3276	12.2.3.  Fragmentation as a way to bypass Network Inspection
  3277
  3278	   Fragmentation is known for potentially allowing to force through a
  3279	   Network Inspection device (e.g., firewall) packets that would be
  3280	   rejected if unfragmented.  This involves sending overlapping
  3281	   fragments to rewrite fields whose initial value led the Network
  3282	   Inspection device to allow the flow go through.
  3283
  3284	   SCHC F/R is expected to be used over one LPWAN link, where no Network
  3285	   Inspection device is expected to sit.  As described in Section 5.2,
  3286	   even if the SCHC F/R on the Network infrastructure side is located in
  3287	   the Internet, a tunnel is to be established between it and the NGW.
  3288
  3289	12.2.4.  Privacy issues associated with SCHC header fields
  3290
  3291	   SCHC F/R allocates a DTag value to fragments belonging to the same
  3292	   SCHC Packet.  Concerns were raised that, if DTag is a wide counter
  3293	   that is incremented in a predictable fashion for each new fragmented
  3294	   SCHC Packet, it might lead to a privacy issue, such as enabling
  3295	   tracking of a device across LPWANs.
  3296
  3297	   However, SCHC F/R is expected to be used over exactly one LPWAN link.
  3298	   As described in Section 5.2, even if the SCHC F/R on the Network
  3299	   infrastructure side is located in the Internet, a tunnel is to be
  3300	   established between it and the NGW.	Therefore, assuming the tunnel
  3301
  3302
  3303
  3304	Minaburo, et al.	  Expires June 7, 2020		       [Page 59]
  3305
  3306	Internet-Draft		       LPWAN SCHC		   December 2019
  3307
  3308
  3309	   provides confidentiality, neither the DTag field nor any other SCHC-
  3310	   introduced field is visible over the Internet.
  3311
  3312	13.  Acknowledgements
  3313
  3314	   Thanks to (in alphabetical order) Sergio Aguilar Romero, David Black,
  3315	   Carsten Bormann, Deborah Brungard, Brian Carpenter, Philippe Clavier,
  3316	   Alissa Cooper, Roman Danyliw, Daniel Ducuara Beltran, Diego Dujovne,
  3317	   Eduardo Ingles Sanchez, Rahul Jadhav, Benjamin Kaduk,
  3318	   Arunprabhu Kandasamy, Suresh Krishnan, Mirja Kuehlewind, Barry Leiba,
  3319	   Sergio Lopez Bernal, Antoni Markovski, Alexey Melnikov,
  3320	   Georgios Papadopoulos, Alexander Pelov, Charles Perkins, Edgar Ramos,
  3321	   Alvaro Retana, Adam Roach, Shoichi Sakane, Joseph Salowey,
  3322	   Pascal Thubert, and Eric Vyncke for useful design considerations,
  3323	   reviews and comments.
  3324
  3325	   Carles Gomez has been funded in part by the Spanish Government
  3326	   (Ministerio de Educacion, Cultura y Deporte) through the Jose
  3327	   Castillejo grant CAS15/00336, and by the ERDF and the Spanish
  3328	   Government through project TEC2016-79988-P.	Part of his contribution
  3329	   to this work has been carried out during his stay as a visiting
  3330	   scholar at the Computer Laboratory of the University of Cambridge.
  3331
  3332	14.  References
  3333
  3334	14.1.  Normative References
  3335
  3336	   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
  3337		      Requirement Levels", BCP 14, RFC 2119,
  3338		      DOI 10.17487/RFC2119, March 1997,
  3339		      <https://www.rfc-editor.org/info/rfc2119>.
  3340
  3341	   [RFC6936]  Fairhurst, G. and M. Westerlund, "Applicability Statement
  3342		      for the Use of IPv6 UDP Datagrams with Zero Checksums",
  3343		      RFC 6936, DOI 10.17487/RFC6936, April 2013,
  3344		      <https://www.rfc-editor.org/info/rfc6936>.
  3345
  3346	   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
  3347		      2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
  3348		      May 2017, <https://www.rfc-editor.org/info/rfc8174>.
  3349
  3350	   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
  3351		      (IPv6) Specification", STD 86, RFC 8200,
  3352		      DOI 10.17487/RFC8200, July 2017,
  3353		      <https://www.rfc-editor.org/info/rfc8200>.
  3354
  3355
  3356
  3357
  3358
  3359
  3360	Minaburo, et al.	  Expires June 7, 2020		       [Page 60]
  3361
  3362	Internet-Draft		       LPWAN SCHC		   December 2019
  3363
  3364
  3365	   [RFC8376]  Farrell, S., Ed., "Low-Power Wide Area Network (LPWAN)
  3366		      Overview", RFC 8376, DOI 10.17487/RFC8376, May 2018,
  3367		      <https://www.rfc-editor.org/info/rfc8376>.
  3368
  3369	14.2.  Informative References
  3370
  3371	   [ETHERNET]
  3372		      "IEEE Standard for Ethernet", IEEE standard,
  3373		      DOI 10.1109/ieeestd.2018.8457469, n.d..
  3374
  3375	   [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,
  3376		      "Transmission of IPv6 Packets over IEEE 802.15.4
  3377		      Networks", RFC 4944, DOI 10.17487/RFC4944, September 2007,
  3378		      <https://www.rfc-editor.org/info/rfc4944>.
  3379
  3380	   [RFC5795]  Sandlund, K., Pelletier, G., and L-E. Jonsson, "The RObust
  3381		      Header Compression (ROHC) Framework", RFC 5795,
  3382		      DOI 10.17487/RFC5795, March 2010,
  3383		      <https://www.rfc-editor.org/info/rfc5795>.
  3384
  3385	   [RFC6282]  Hui, J., Ed. and P. Thubert, "Compression Format for IPv6
  3386		      Datagrams over IEEE 802.15.4-Based Networks", RFC 6282,
  3387		      DOI 10.17487/RFC6282, September 2011,
  3388		      <https://www.rfc-editor.org/info/rfc6282>.
  3389
  3390	   [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme,
  3391		      "IPv6 Flow Label Specification", RFC 6437,
  3392		      DOI 10.17487/RFC6437, November 2011,
  3393		      <https://www.rfc-editor.org/info/rfc6437>.
  3394
  3395	   [RFC7136]  Carpenter, B. and S. Jiang, "Significance of IPv6
  3396		      Interface Identifiers", RFC 7136, DOI 10.17487/RFC7136,
  3397		      February 2014, <https://www.rfc-editor.org/info/rfc7136>.
  3398
  3399	   [RFC8065]  Thaler, D., "Privacy Considerations for IPv6 Adaptation-
  3400		      Layer Mechanisms", RFC 8065, DOI 10.17487/RFC8065,
  3401		      February 2017, <https://www.rfc-editor.org/info/rfc8065>.
  3402
  3403	Appendix A.  Compression Examples
  3404
  3405	   This section gives some scenarios of the compression mechanism for
  3406	   IPv6/UDP.  The goal is to illustrate the behavior of SCHC.
  3407
  3408	   The mechanisms defined in this document can be applied to a Dev that
  3409	   embeds some applications running over CoAP.	In this example, three
  3410	   flows are considered.  The first flow is for the device management
  3411	   based on CoAP using Link Local IPv6 addresses and UDP ports 123 and
  3412	   124 for Dev and App, respectively.  The second flow will be a CoAP
  3413
  3414
  3415
  3416	Minaburo, et al.	  Expires June 7, 2020		       [Page 61]
  3417
  3418	Internet-Draft		       LPWAN SCHC		   December 2019
  3419
  3420
  3421	   server for measurements done by the Dev (using ports 5683) and Global
  3422	   IPv6 Address prefixes alpha::IID/64 to beta::1/64.  The last flow is
  3423	   for legacy applications using different ports numbers, the
  3424	   destination IPv6 address prefix is gamma::1/64.
  3425
  3426	   Figure 25 presents the protocol stack.  IPv6 and UDP are represented
  3427	   with dotted lines since these protocols are compressed on the radio
  3428	   link.
  3429
  3430	    Management	 Data
  3431	   +----------+---------+---------+
  3432	   |   CoAP   |  CoAP	| legacy  |
  3433	   +----||----+---||----+---||----+
  3434	   .   UDP    .  UDP	|   UDP   |
  3435	   ................................
  3436	   .   IPv6   .  IPv6	.  IPv6   .
  3437	   +------------------------------+
  3438	   |	SCHC Header compression   |
  3439	   |	  and fragmentation	  |
  3440	   +------------------------------+
  3441	   |	  LPWAN L2 technologies   |
  3442	   +------------------------------+
  3443		    Dev or NGW
  3444
  3445
  3446		      Figure 25: Simplified Protocol Stack for LP-WAN
  3447
  3448	   In some LPWAN technologies, only the Devs have a device ID.	When
  3449	   such technologies are used, it is necessary to statically define an
  3450	   IID for the Link Local address for the SCHC C/D.
  3451
  3452	   Rule 0
  3453	     Special Rule ID used to tag an uncompressed UDP/IPV6 packet.
  3454
  3455	   Rule 1
  3456	    +----------------+--+--+--+---------+--------+------------++------+
  3457	    | Field	     |FL|FP|DI| Value	| Match  | Comp Decomp|| Sent |
  3458	    |		     |	|  |  | 	| Opera. | Action     ||[bits]|
  3459	    +----------------+--+--+--+---------+---------------------++------+
  3460	    |IPv6 Version    |4 |1 |Bi|6	| ignore | not-sent   ||      |
  3461	    |IPv6 DiffServ   |8 |1 |Bi|0	| equal  | not-sent   ||      |
  3462	    |IPv6 Flow Label |20|1 |Bi|0	| equal  | not-sent   ||      |
  3463	    |IPv6 Length     |16|1 |Bi| 	| ignore | compute-*  ||      |
  3464	    |IPv6 Next Header|8 |1 |Bi|17	| equal  | not-sent   ||      |
  3465	    |IPv6 Hop Limit  |8 |1 |Bi|255	| ignore | not-sent   ||      |
  3466	    |IPv6 DevPrefix  |64|1 |Bi|FE80::/64| equal  | not-sent   ||      |
  3467	    |IPv6 DevIID     |64|1 |Bi| 	| ignore | DevIID     ||      |
  3468	    |IPv6 AppPrefix  |64|1 |Bi|FE80::/64| equal  | not-sent   ||      |
  3469
  3470
  3471
  3472	Minaburo, et al.	  Expires June 7, 2020		       [Page 62]
  3473
  3474	Internet-Draft		       LPWAN SCHC		   December 2019
  3475
  3476
  3477	    |IPv6 AppIID     |64|1 |Bi|::1	| equal  | not-sent   ||      |
  3478	    +================+==+==+==+=========+========+============++======+
  3479	    |UDP DevPort     |16|1 |Bi|123	| equal  | not-sent   ||      |
  3480	    |UDP AppPort     |16|1 |Bi|124	| equal  | not-sent   ||      |
  3481	    |UDP Length      |16|1 |Bi| 	| ignore | compute-*  ||      |
  3482	    |UDP checksum    |16|1 |Bi| 	| ignore | compute-*  ||      |
  3483	    +================+==+==+==+=========+========+============++======+
  3484
  3485	    Rule 2
  3486	    +----------------+--+--+--+---------+--------+------------++------+
  3487	    | Field	     |FL|FP|DI| Value	| Match  | Action     || Sent |
  3488	    |		     |	|  |  | 	| Opera. | Action     ||[bits]|
  3489	    +----------------+--+--+--+---------+--------+------------++------+
  3490	    |IPv6 Version    |4 |1 |Bi|6	| ignore | not-sent   ||      |
  3491	    |IPv6 DiffServ   |8 |1 |Bi|0	| equal  | not-sent   ||      |
  3492	    |IPv6 Flow Label |20|1 |Bi|0	| equal  | not-sent   ||      |
  3493	    |IPv6 Length     |16|1 |Bi| 	| ignore | compute-*  ||      |
  3494	    |IPv6 Next Header|8 |1 |Bi|17	| equal  | not-sent   ||      |
  3495	    |IPv6 Hop Limit  |8 |1 |Bi|255	| ignore | not-sent   ||      |
  3496	    |IPv6 DevPrefix  |64|1 |Bi|[alpha/64, match- |mapping-sent||   1  |
  3497	    |		     |	|  |  |fe80::/64] mapping|	      ||      |
  3498	    |IPv6 DevIID     |64|1 |Bi| 	| ignore | DevIID     ||      |
  3499	    |IPv6 AppPrefix  |64|1 |Bi|[beta/64,| match- |mapping-sent||   2  |
  3500	    |		     |	|  |  |alpha/64,| mapping|	      ||      |
  3501	    |		     |	|  |  |fe80::64]|	 |	      ||      |
  3502	    |IPv6 AppIID     |64|1 |Bi|::1000	| equal  | not-sent   ||      |
  3503	    +================+==+==+==+=========+========+============++======+
  3504	    |UDP DevPort     |16|1 |Bi|5683	| equal  | not-sent   ||      |
  3505	    |UDP AppPort     |16|1 |Bi|5683	| equal  | not-sent   ||      |
  3506	    |UDP Length      |16|1 |Bi| 	| ignore | compute-*  ||      |
  3507	    |UDP checksum    |16|1 |Bi| 	| ignore | compute-*  ||      |
  3508	    +================+==+==+==+=========+========+============++======+
  3509
  3510	    Rule 3
  3511	    +----------------+--+--+--+---------+--------+------------++------+
  3512	    | Field	     |FL|FP|DI| Value	| Match  | Action     || Sent |
  3513	    |		     |	|  |  | 	| Opera. | Action     ||[bits]|
  3514	    +----------------+--+--+--+---------+--------+------------++------+
  3515	    |IPv6 Version    |4 |1 |Bi|6	| ignore | not-sent   ||      |
  3516	    |IPv6 DiffServ   |8 |1 |Bi|0	| equal  | not-sent   ||      |
  3517	    |IPv6 Flow Label |20|1 |Bi|0	| equal  | not-sent   ||      |
  3518	    |IPv6 Length     |16|1 |Bi| 	| ignore | compute-*  ||      |
  3519	    |IPv6 Next Header|8 |1 |Bi|17	| equal  | not-sent   ||      |
  3520	    |IPv6 Hop Limit  |8 |1 |Up|255	| ignore | not-sent   ||      |
  3521	    |IPv6 Hop Limit  |8 |1 |Dw| 	| ignore | value-sent ||   8  |
  3522	    |IPv6 DevPrefix  |64|1 |Bi|alpha/64 | equal  | not-sent   ||      |
  3523	    |IPv6 DevIID     |64|1 |Bi| 	| ignore | DevIID     ||      |
  3524	    |IPv6 AppPrefix  |64|1 |Bi|gamma/64 | equal  | not-sent   ||      |
  3525
  3526
  3527
  3528	Minaburo, et al.	  Expires June 7, 2020		       [Page 63]
  3529
  3530	Internet-Draft		       LPWAN SCHC		   December 2019
  3531
  3532
  3533	    |IPv6 AppIID     |64|1 |Bi|::1000	| equal  | not-sent   ||      |
  3534	    +================+==+==+==+=========+========+============++======+
  3535	    |UDP DevPort     |16|1 |Bi|8720	| MSB(12)| LSB	      ||   4  |
  3536	    |UDP AppPort     |16|1 |Bi|8720	| MSB(12)| LSB	      ||   4  |
  3537	    |UDP Length      |16|1 |Bi| 	| ignore | compute-*  ||      |
  3538	    |UDP checksum    |16|1 |Bi| 	| ignore | compute-*  ||      |
  3539	    +================+==+==+==+=========+========+============++======+
  3540
  3541
  3542
  3543				 Figure 26: Context Rules
  3544
  3545	   Figure 26 describes a example of a Rule set.
  3546
  3547	   In this example, 0 was chosen as the special Rule ID that tags
  3548	   packets that cannot be compressed with any compression Rule.
  3549
  3550	   All the fields described in Rules 1-3 are present in the IPv6 and UDP
  3551	   headers.  The DevIID-DID value is found in the L2 header.
  3552
  3553	   Rules 2-3 use global addresses.  The way the Dev learns the prefix is
  3554	   not in the scope of the document.
  3555
  3556	   Rule 3 compresses each port number to 4 bits.
  3557
  3558	Appendix B.  Fragmentation Examples
  3559
  3560	   This section provides examples for the various fragment reliability
  3561	   modes specified in this document.  In the drawings, Bitmaps are shown
  3562	   in their uncompressed form.
  3563
  3564	   Figure 27 illustrates the transmission in No-ACK mode of a SCHC
  3565	   Packet that needs 11 SCHC Fragments.  FCN is 1 bit wide.
  3566
  3567
  3568
  3569
  3570
  3571
  3572
  3573
  3574
  3575
  3576
  3577
  3578
  3579
  3580
  3581
  3582
  3583
  3584	Minaburo, et al.	  Expires June 7, 2020		       [Page 64]
  3585
  3586	Internet-Draft		       LPWAN SCHC		   December 2019
  3587
  3588
  3589		   Sender		Receiver
  3590		     |-------FCN=0-------->|
  3591		     |-------FCN=0-------->|
  3592		     |-------FCN=0-------->|
  3593		     |-------FCN=0-------->|
  3594		     |-------FCN=0-------->|
  3595		     |-------FCN=0-------->|
  3596		     |-------FCN=0-------->|
  3597		     |-------FCN=0-------->|
  3598		     |-------FCN=0-------->|
  3599		     |-------FCN=0-------->|
  3600		     |-----FCN=1 + RCS --->| Integrity check: success
  3601		   (End)
  3602
  3603			 Figure 27: No-ACK mode, 11 SCHC Fragments
  3604
  3605	   In the following examples, N (the size of the FCN field) is 3 bits.
  3606	   The All-1 FCN value is 7.
  3607
  3608	   Figure 28 illustrates the transmission in ACK-on-Error mode of a SCHC
  3609	   Packet fragmented in 11 tiles, with one tile per SCHC Fragment,
  3610	   WINDOW_SIZE=7 and no lost SCHC Fragment.
  3611
  3612		   Sender		Receiver
  3613		     |-----W=0, FCN=6----->|
  3614		     |-----W=0, FCN=5----->|
  3615		     |-----W=0, FCN=4----->|
  3616		     |-----W=0, FCN=3----->|
  3617		     |-----W=0, FCN=2----->|
  3618		     |-----W=0, FCN=1----->|
  3619		     |-----W=0, FCN=0----->|
  3620		 (no ACK)
  3621		     |-----W=1, FCN=6----->|
  3622		     |-----W=1, FCN=5----->|
  3623		     |-----W=1, FCN=4----->|
  3624		     |--W=1, FCN=7 + RCS-->| Integrity check: success
  3625		     |<-- ACK, W=1, C=1 ---| C=1
  3626		   (End)
  3627
  3628	    Figure 28: ACK-on-Error mode, 11 tiles, one tile per SCHC Fragment,
  3629				  no lost SCHC Fragment.
  3630
  3631	   Figure 29 illustrates the transmission in ACK-on-Error mode of a SCHC
  3632	   Packet fragmented in 11 tiles, with one tile per SCHC Fragment,
  3633	   WINDOW_SIZE=7 and three lost SCHC Fragments.
  3634
  3635
  3636
  3637
  3638
  3639
  3640	Minaburo, et al.	  Expires June 7, 2020		       [Page 65]
  3641
  3642	Internet-Draft		       LPWAN SCHC		   December 2019
  3643
  3644
  3645		    Sender	       Receiver
  3646		     |-----W=0, FCN=6----->|
  3647		     |-----W=0, FCN=5----->|
  3648		     |-----W=0, FCN=4--X-->|
  3649		     |-----W=0, FCN=3----->|
  3650		     |-----W=0, FCN=2--X-->|
  3651		     |-----W=0, FCN=1----->|
  3652		     |-----W=0, FCN=0----->|	    6543210
  3653		     |<-- ACK, W=0, C=0 ---| Bitmap:1101011
  3654		     |-----W=0, FCN=4----->|
  3655		     |-----W=0, FCN=2----->|
  3656		 (no ACK)
  3657		     |-----W=1, FCN=6----->|
  3658		     |-----W=1, FCN=5----->|
  3659		     |-----W=1, FCN=4--X-->|
  3660		     |- W=1, FCN=7 + RCS ->| Integrity check: failure
  3661		     |<-- ACK, W=1, C=0 ---| C=0, Bitmap:1100001
  3662		     |-----W=1, FCN=4----->| Integrity check: success
  3663		     |<-- ACK, W=1, C=1 ---| C=1
  3664		   (End)
  3665
  3666	    Figure 29: ACK-on-Error mode, 11 tiles, one tile per SCHC Fragment,
  3667				   lost SCHC Fragments.
  3668
  3669	   Figure 30 shows an example of a transmission in ACK-on-Error mode of
  3670	   a SCHC Packet fragmented in 73 tiles, with N=5, WINDOW_SIZE=28, M=2
  3671	   and 3 lost SCHC Fragments.
  3672
  3673
  3674
  3675
  3676
  3677
  3678
  3679
  3680
  3681
  3682
  3683
  3684
  3685
  3686
  3687
  3688
  3689
  3690
  3691
  3692
  3693
  3694
  3695
  3696	Minaburo, et al.	  Expires June 7, 2020		       [Page 66]
  3697
  3698	Internet-Draft		       LPWAN SCHC		   December 2019
  3699
  3700
  3701	      Sender		   Receiver
  3702	       |-----W=0, FCN=27----->| 4 tiles sent
  3703	       |-----W=0, FCN=23----->| 4 tiles sent
  3704	       |-----W=0, FCN=19----->| 4 tiles sent
  3705	       |-----W=0, FCN=15--X-->| 4 tiles sent (not received)
  3706	       |-----W=0, FCN=11----->| 4 tiles sent
  3707	       |-----W=0, FCN=7 ----->| 4 tiles sent
  3708	       |-----W=0, FCN=3 ----->| 4 tiles sent
  3709	       |-----W=1, FCN=27----->| 4 tiles sent
  3710	       |-----W=1, FCN=23----->| 4 tiles sent
  3711	       |-----W=1, FCN=19----->| 4 tiles sent
  3712	       |-----W=1, FCN=15----->| 4 tiles sent
  3713	       |-----W=1, FCN=11----->| 4 tiles sent
  3714	       |-----W=1, FCN=7 ----->| 4 tiles sent
  3715	       |-----W=1, FCN=3 --X-->| 4 tiles sent (not received)
  3716	       |-----W=2, FCN=27----->| 4 tiles sent
  3717	       |-----W=2, FCN=23----->| 4 tiles sent
  3718	   ^   |-----W=2, FCN=19----->| 1 tile sent
  3719	   |   |-----W=2, FCN=18----->| 1 tile sent
  3720	   |   |-----W=2, FCN=17----->| 1 tile sent
  3721	       |-----W=2, FCN=16----->| 1 tile sent
  3722	   s   |-----W=2, FCN=15----->| 1 tile sent
  3723	   m   |-----W=2, FCN=14----->| 1 tile sent
  3724	   a   |-----W=2, FCN=13--X-->| 1 tile sent (not received)
  3725	   l   |-----W=2, FCN=12----->| 1 tile sent
  3726	   l   |---W=2, FCN=31 + RCS->| Integrity check: failure
  3727	   e   |<--- ACK, W=0, C=0 ---| C=0, Bitmap:1111111111110000111111111111
  3728	   r   |-----W=0, FCN=15----->| 1 tile sent
  3729	       |-----W=0, FCN=14----->| 1 tile sent
  3730	   L   |-----W=0, FCN=13----->| 1 tile sent
  3731	   2   |-----W=0, FCN=12----->| 1 tile sent
  3732	       |<--- ACK, W=1, C=0 ---| C=0, Bitmap:1111111111111111111111110000
  3733	   M   |-----W=1, FCN=3 ----->| 1 tile sent
  3734	   T   |-----W=1, FCN=2 ----->| 1 tile sent
  3735	   U   |-----W=1, FCN=1 ----->| 1 tile sent
  3736	       |-----W=1, FCN=0 ----->| 1 tile sent
  3737	   |   |<--- ACK, W=2, C=0 ---| C=0, Bitmap:1111111111111101000000000001
  3738	   |   |-----W=2, FCN=13----->| Integrity check: success
  3739	   V   |<--- ACK, W=2, C=1 ---| C=1
  3740	     (End)
  3741
  3742			Figure 30: ACK-on-Error mode, variable MTU.
  3743
  3744	   In this example, the L2 MTU becomes reduced just before sending the
  3745	   "W=2, FCN=19" fragment, leaving space for only 1 tile in each
  3746	   forthcoming SCHC Fragment.  Before retransmissions, the 73 tiles are
  3747	   carried by a total of 25 SCHC Fragments, the last 9 being of smaller
  3748	   size.
  3749
  3750
  3751
  3752	Minaburo, et al.	  Expires June 7, 2020		       [Page 67]
  3753
  3754	Internet-Draft		       LPWAN SCHC		   December 2019
  3755
  3756
  3757	   Note: other sequences of events (e.g., regarding when ACKs are sent
  3758	   by the Receiver) are also allowed by this specification.  Profiles
  3759	   may restrict this flexibility.
  3760
  3761	   Figure 31 illustrates the transmission in ACK-Always mode of a SCHC
  3762	   Packet fragmented in 11 tiles, with one tile per SCHC Fragment, with
  3763	   N=3, WINDOW_SIZE=7 and no loss.
  3764
  3765		   Sender		Receiver
  3766		     |-----W=0, FCN=6----->|
  3767		     |-----W=0, FCN=5----->|
  3768		     |-----W=0, FCN=4----->|
  3769		     |-----W=0, FCN=3----->|
  3770		     |-----W=0, FCN=2----->|
  3771		     |-----W=0, FCN=1----->|
  3772		     |-----W=0, FCN=0----->|
  3773		     |<-- ACK, W=0, C=0 ---| Bitmap:1111111
  3774		     |-----W=1, FCN=6----->|
  3775		     |-----W=1, FCN=5----->|
  3776		     |-----W=1, FCN=4----->|
  3777		     |--W=1, FCN=7 + RCS-->| Integrity check: success
  3778		     |<-- ACK, W=1, C=1 ---| C=1
  3779		   (End)
  3780
  3781	   Figure 31: ACK-Always mode, 11 tiles, one tile per SCHC Fragment, no
  3782					   loss.
  3783
  3784	   Figure 32 illustrates the transmission in ACK-Always mode of a SCHC
  3785	   Packet fragmented in 11 tiles, with one tile per SCHC Fragment, N=3,
  3786	   WINDOW_SIZE=7 and three lost SCHC Fragments.
  3787
  3788
  3789
  3790
  3791
  3792
  3793
  3794
  3795
  3796
  3797
  3798
  3799
  3800
  3801
  3802
  3803
  3804
  3805
  3806
  3807
  3808	Minaburo, et al.	  Expires June 7, 2020		       [Page 68]
  3809
  3810	Internet-Draft		       LPWAN SCHC		   December 2019
  3811
  3812
  3813		   Sender		Receiver
  3814		     |-----W=0, FCN=6----->|
  3815		     |-----W=0, FCN=5----->|
  3816		     |-----W=0, FCN=4--X-->|
  3817		     |-----W=0, FCN=3----->|
  3818		     |-----W=0, FCN=2--X-->|
  3819		     |-----W=0, FCN=1----->|
  3820		     |-----W=0, FCN=0----->|	    6543210
  3821		     |<-- ACK, W=0, C=0 ---| Bitmap:1101011
  3822		     |-----W=0, FCN=4----->|
  3823		     |-----W=0, FCN=2----->|
  3824		     |<-- ACK, W=0, C=0 ---| Bitmap:1111111
  3825		     |-----W=1, FCN=6----->|
  3826		     |-----W=1, FCN=5----->|
  3827		     |-----W=1, FCN=4--X-->|
  3828		     |--W=1, FCN=7 + RCS-->| Integrity check: failure
  3829		     |<-- ACK, W=1, C=0 ---| C=0, Bitmap:11000001
  3830		     |-----W=1, FCN=4----->| Integrity check: success
  3831		     |<-- ACK, W=1, C=1 ---| C=1
  3832		   (End)
  3833
  3834	     Figure 32: ACK-Always mode, 11 tiles, one tile per SCHC Fragment,
  3835				three lost SCHC Fragments.
  3836
  3837	   Figure 33 illustrates the transmission in ACK-Always mode of a SCHC
  3838	   Packet fragmented in 6 tiles, with one tile per SCHC Fragment, N=3,
  3839	   WINDOW_SIZE=7, three lost SCHC Fragments and only one retry needed to
  3840	   recover each lost SCHC Fragment.
  3841
  3842		     Sender		   Receiver
  3843			|-----W=0, FCN=6----->|
  3844			|-----W=0, FCN=5----->|
  3845			|-----W=0, FCN=4--X-->|
  3846			|-----W=0, FCN=3--X-->|
  3847			|-----W=0, FCN=2--X-->|
  3848			|--W=0, FCN=7 + RCS-->| Integrity check: failure
  3849			|<-- ACK, W=0, C=0 ---| C=0, Bitmap:1100001
  3850			|-----W=0, FCN=4----->| Integrity check: failure
  3851			|-----W=0, FCN=3----->| Integrity check: failure
  3852			|-----W=0, FCN=2----->| Integrity check: success
  3853			|<-- ACK, W=0, C=1 ---| C=1
  3854		      (End)
  3855
  3856	     Figure 33: ACK-Always mode, 6 tiles, one tile per SCHC Fragment,
  3857				three lost SCHC Fragments.
  3858
  3859	   Figure 34 illustrates the transmission in ACK-Always mode of a SCHC
  3860	   Packet fragmented in 6 tiles, with one tile per SCHC Fragment, N=3,
  3861
  3862
  3863
  3864	Minaburo, et al.	  Expires June 7, 2020		       [Page 69]
  3865
  3866	Internet-Draft		       LPWAN SCHC		   December 2019
  3867
  3868
  3869	   WINDOW_SIZE=7, three lost SCHC Fragments, and the second SCHC ACK
  3870	   lost.
  3871
  3872		     Sender		   Receiver
  3873			|-----W=0, FCN=6----->|
  3874			|-----W=0, FCN=5----->|
  3875			|-----W=0, FCN=4--X-->|
  3876			|-----W=0, FCN=3--X-->|
  3877			|-----W=0, FCN=2--X-->|
  3878			|--W=0, FCN=7 + RCS-->| Integrity check: failure
  3879			|<-- ACK, W=0, C=0 ---| C=0, Bitmap:1100001
  3880			|-----W=0, FCN=4----->| Integrity check: failure
  3881			|-----W=0, FCN=3----->| Integrity check: failure
  3882			|-----W=0, FCN=2----->| Integrity check: success
  3883			|<-X-ACK, W=0, C=1 ---| C=1
  3884	       timeout	|		      |
  3885			|--- W=0, ACK REQ --->| ACK REQ
  3886			|<-- ACK, W=0, C=1 ---| C=1
  3887		      (End)
  3888
  3889	   Figure 34: ACK-Always mode, 6 tiles, one tile per SCHC Fragment, SCHC
  3890					 ACK loss.
  3891
  3892	   Figure 35 illustrates the transmission in ACK-Always mode of a SCHC
  3893	   Packet fragmented in 6 tiles, with N=3, WINDOW_SIZE=7, with three
  3894	   lost SCHC Fragments, and one retransmitted SCHC Fragment lost again.
  3895
  3896		      Sender		    Receiver
  3897			|-----W=0, FCN=6----->|
  3898			|-----W=0, FCN=5----->|
  3899			|-----W=0, FCN=4--X-->|
  3900			|-----W=0, FCN=3--X-->|
  3901			|-----W=0, FCN=2--X-->|
  3902			|--W=0, FCN=7 + RCS-->| Integrity check: failure
  3903			|<-- ACK, W=0, C=0 ---| C=0, Bitmap:1100001
  3904			|-----W=0, FCN=4----->| Integrity check: failure
  3905			|-----W=0, FCN=3----->| Integrity check: failure
  3906			|-----W=0, FCN=2--X-->|
  3907		 timeout|		      |
  3908			|--- W=0, ACK REQ --->| ACK REQ
  3909			|<-- ACK, W=0, C=0 ---| C=0, Bitmap: 1111101
  3910			|-----W=0, FCN=2----->| Integrity check: success
  3911			|<-- ACK, W=0, C=1 ---| C=1
  3912		      (End)
  3913
  3914	   Figure 35: ACK-Always mode, 6 tiles, retransmitted SCHC Fragment lost
  3915					  again.
  3916
  3917
  3918
  3919
  3920	Minaburo, et al.	  Expires June 7, 2020		       [Page 70]
  3921
  3922	Internet-Draft		       LPWAN SCHC		   December 2019
  3923
  3924
  3925	   Figure 36 illustrates the transmission in ACK-Always mode of a SCHC
  3926	   Packet fragmented in 28 tiles, with one tile per SCHC Fragment, N=5,
  3927	   WINDOW_SIZE=24 and two lost SCHC Fragments.
  3928
  3929		 Sender 	      Receiver
  3930		   |-----W=0, FCN=23----->|
  3931		   |-----W=0, FCN=22----->|
  3932		   |-----W=0, FCN=21--X-->|
  3933		   |-----W=0, FCN=20----->|
  3934		   |-----W=0, FCN=19----->|
  3935		   |-----W=0, FCN=18----->|
  3936		   |-----W=0, FCN=17----->|
  3937		   |-----W=0, FCN=16----->|
  3938		   |-----W=0, FCN=15----->|
  3939		   |-----W=0, FCN=14----->|
  3940		   |-----W=0, FCN=13----->|
  3941		   |-----W=0, FCN=12----->|
  3942		   |-----W=0, FCN=11----->|
  3943		   |-----W=0, FCN=10--X-->|
  3944		   |-----W=0, FCN=9 ----->|
  3945		   |-----W=0, FCN=8 ----->|
  3946		   |-----W=0, FCN=7 ----->|
  3947		   |-----W=0, FCN=6 ----->|
  3948		   |-----W=0, FCN=5 ----->|
  3949		   |-----W=0, FCN=4 ----->|
  3950		   |-----W=0, FCN=3 ----->|
  3951		   |-----W=0, FCN=2 ----->|
  3952		   |-----W=0, FCN=1 ----->|
  3953		   |-----W=0, FCN=0 ----->|
  3954		   |			  |
  3955		   |<--- ACK, W=0, C=0 ---| Bitmap:110111111111101111111111
  3956		   |-----W=0, FCN=21----->|
  3957		   |-----W=0, FCN=10----->|
  3958		   |<--- ACK, W=0, C=0 ---| Bitmap:111111111111111111111111
  3959		   |-----W=1, FCN=23----->|
  3960		   |-----W=1, FCN=22----->|
  3961		   |-----W=1, FCN=21----->|
  3962		   |--W=1, FCN=31 + RCS-->| Integrity check: success
  3963		   |<--- ACK, W=1, C=1 ---| C=1
  3964		 (End)
  3965
  3966	     Figure 36: ACK-Always mode, 28 tiles, one tile per SCHC Fragment,
  3967				   lost SCHC Fragments.
  3968
  3969
  3970
  3971
  3972
  3973
  3974
  3975
  3976	Minaburo, et al.	  Expires June 7, 2020		       [Page 71]
  3977
  3978	Internet-Draft		       LPWAN SCHC		   December 2019
  3979
  3980
  3981	Appendix C.  Fragmentation State Machines
  3982
  3983	   The fragmentation state machines of the sender and the receiver, one
  3984	   for each of the different reliability modes, are described in the
  3985	   following figures:
  3986
  3987			+===========+
  3988	   +------------+  Init     |
  3989	   |  FCN=0	+===========+
  3990	   |  No Window
  3991	   |  No Bitmap
  3992	   |		       +-------+
  3993	   |	      +========+==+    | More Fragments
  3994	   |	      | 	  | <--+ ~~~~~~~~~~~~~~~~~~~~
  3995	   +--------> |   Send	  |	 send Fragment (FCN=0)
  3996		      +===+=======+
  3997			  |  last fragment
  3998			  |  ~~~~~~~~~~~~
  3999			  |  FCN = 1
  4000			  v  send fragment+RCS
  4001		      +============+
  4002		      |    END	   |
  4003		      +============+
  4004
  4005		    Figure 37: Sender State Machine for the No-ACK Mode
  4006
  4007				 +------+ Not All-1
  4008		      +==========+=+	| ~~~~~~~~~~~~~~~~~~~
  4009		      | 	   + <--+ set Inactivity Timer
  4010		      |  RCV Frag  +-------+
  4011		      +=+===+======+	   |All-1 &
  4012	      All-1 &	|   |		   |RCS correct
  4013	    RCS wrong	|   |Inactivity    |
  4014			|   |Timer Exp.    |
  4015			v   |		   |
  4016	     +==========++  |		   v
  4017	     |	 Error	 |<-+	  +========+==+
  4018	     +===========+	  |    END    |
  4019				  +===========+
  4020
  4021
  4022		   Figure 38: Receiver State Machine for the No-ACK Mode
  4023
  4024
  4025
  4026
  4027
  4028
  4029
  4030
  4031
  4032	Minaburo, et al.	  Expires June 7, 2020		       [Page 72]
  4033
  4034	Internet-Draft		       LPWAN SCHC		   December 2019
  4035
  4036
  4037			 +=======+
  4038			 | INIT  |	 FCN!=0 & more frags
  4039			 |	 |	 ~~~~~~~~~~~~~~~~~~~~~~
  4040			 +======++  +--+ send Window + frag(FCN)
  4041			    W=0 |   |  | FCN-
  4042	     Clear lcl_bm	|   |  v set lcl_bm
  4043		  FCN=max value |  ++==+========+
  4044				+> |		|
  4045	   +---------------------> |	SEND	|
  4046	   |			   +==+===+=====+
  4047	   |	  FCN==0 & more frags |   | last frag
  4048	   |	~~~~~~~~~~~~~~~~~~~~~ |   | ~~~~~~~~~~~~~~~
  4049	   |		   set lcl_bm |   | set lcl_bm
  4050	   |   send wnd + frag(all-0) |   | send wnd+frag(all-1)+RCS
  4051	   |	   set Retrans_Timer  |   | set Retrans_Timer
  4052	   |			      |   |
  4053	   |Recv_wnd == wnd &	      |   |
  4054	   |lcl_bm==recv_bm &	      |   |  +----------------------+
  4055	   |more frag		      |   |  | lcl_bm!=rcv-bm	    |
  4056	   |~~~~~~~~~~~~~~~~~~~~~~    |   |  | ~~~~~~~~~	    |
  4057	   |Stop Retrans_Timer	      |   |  | Attempt++	    v
  4058	   |clear lcl_bm	      v   v  |		      +=====+=+
  4059	   |window=next_window	 +====+===+==+===+	      |Resend |
  4060	   +---------------------+		 |	      |Missing|
  4061			    +----+     Wait	 |	      |Frag   |
  4062	   not expected wnd |	 |    Bitmap	 |	      +=======+
  4063	   ~~~~~~~~~~~~~~~~ +--->+		 ++Retrans_Timer Exp  |
  4064	       discard frag	 +==+=+===+=+==+=+| ~~~~~~~~~~~~~~~~~ |
  4065				    | |   | ^  ^  |reSend(empty)All-* |
  4066				    | |   | |  |  |Set Retrans_Timer  |
  4067				    | |   | |  +--+Attempt++	      |
  4068	     C_bit==1 & 	    | |   | +-------------------------+
  4069	   Recv_window==window &    | |   |   all missing frags sent
  4070			no more frag| |   |   ~~~~~~~~~~~~~~~~~~~~~~
  4071	    ~~~~~~~~~~~~~~~~~~~~~~~~| |   |   Set Retrans_Timer
  4072		  Stop Retrans_Timer| |   |
  4073	    +=============+	    | |   |
  4074	    |	  END	  +<--------+ |   |
  4075	    +=============+	      |   | Attempt > MAX_ACK_REQUESTS
  4076		       All-1 Window & |   | ~~~~~~~~~~~~~~~~~~
  4077			  C_bit ==0 & |   v Send Abort
  4078		     lcl_bm==recv_bm  | +=+===========+
  4079			 ~~~~~~~~~~~~ +>|    ERROR    |
  4080			   Send Abort	+=============+
  4081
  4082
  4083
  4084		  Figure 39: Sender State Machine for the ACK-Always Mode
  4085
  4086
  4087
  4088	Minaburo, et al.	  Expires June 7, 2020		       [Page 73]
  4089
  4090	Internet-Draft		       LPWAN SCHC		   December 2019
  4091
  4092
  4093	    Not All- & w=expected +---+   +---+w = Not expected
  4094	    ~~~~~~~~~~~~~~~~~~~~~ |   |   |   |~~~~~~~~~~~~~~~~
  4095	    Set lcl_bm(FCN)	  |   v   v   |discard
  4096				 ++===+===+===+=+
  4097	   +---------------------+     Rcv	+--->* ABORT
  4098	   |  +------------------+   Window	|
  4099	   |  | 		 +=====+==+=====+
  4100	   |  |       All-0 & w=expect |  ^ w =next & not-All
  4101	   |  |     ~~~~~~~~~~~~~~~~~~ |  |~~~~~~~~~~~~~~~~~~~~~
  4102	   |  |    set lcl_bm(FCN)     |  |expected = next window
  4103	   |  |      send lcl_bm       |  |Clear lcl_bm
  4104	   |  | 		       |  |
  4105	   |  | w=expected & not-All   |  |
  4106	   |  | ~~~~~~~~~~~~~~~~~~     |  |
  4107	   |  |     set lcl_bm(FCN)+-+ |  | +--+ w=next & All-0
  4108	   |  |     if lcl_bm full | | |  | |  | ~~~~~~~~~~~~~~~
  4109	   |  |     send lcl_bm    | | |  | |  | expected = nxt wnd
  4110	   |  | 		   v | v  | |  | Clear lcl_bm
  4111	   |  |w=expected& All-1 +=+=+=+==+=++ | set lcl_bm(FCN)
  4112	   |  |  ~~~~~~~~~~~  +->+    Wait   +<+ send lcl_bm
  4113	   |  |    discard    +--|    Next   |
  4114	   |  | All-0  +---------+  Window   +--->* ABORT
  4115	   |  | ~~~~~  +-------->+========+=++
  4116	   |  | snd lcl_bm  All-1 & w=next| |  All-1 & w=nxt
  4117	   |  | 	       & RCS wrong| |  & RCS right
  4118	   |  | 	 ~~~~~~~~~~~~~~~~~| | ~~~~~~~~~~~~~~~~~~
  4119	   |  | 	   set lcl_bm(FCN)| |set lcl_bm(FCN)
  4120	   |  | 	       send lcl_bm| |send lcl_bm
  4121	   |  | 			  | +----------------------+
  4122	   |  |All-1 & w=expected	  |			   |
  4123	   |  |& RCS wrong		  v   +---+ w=expected &   |
  4124	   |  |~~~~~~~~~~~~~~~~~~~~  +====+=====+ | RCS wrong	   |
  4125	   |  |set lcl_bm(FCN)	     |		+<+ ~~~~~~~~~~~~~~ |
  4126	   |  |send lcl_bm	     | Wait End |   set lcl_bm(FCN)|
  4127	   |  +--------------------->+		+--->* ABORT	   |
  4128	   |			     +===+====+=+-+ All-1&RCS wrong|
  4129	   |				 |    ^   | ~~~~~~~~~~~~~~~|
  4130	   |	  w=expected & RCS right |    +---+   send lcl_bm  |
  4131	   |	  ~~~~~~~~~~~~~~~~~~~~~~ |			   |
  4132	   |	   set lcl_bm(FCN)	 | +-+ Not All-1	   |
  4133	   |	    send lcl_bm 	 | | | ~~~~~~~~~	   |
  4134	   |				 | | |	discard 	   |
  4135	   |All-1&w=expected & RCS right | | |			   |
  4136	   |~~~~~~~~~~~~~~~~~~~~~~~~~~~~ v | v +----+All-1	   |
  4137	   |set lcl_bm(FCN)	       +=+=+=+=+==+ |~~~~~~~~~	   |
  4138	   |send lcl_bm 	       |	  +<+Send lcl_bm   |
  4139	   +-------------------------->+    END   |		   |
  4140				       +==========+<---------------+
  4141
  4142
  4143
  4144	Minaburo, et al.	  Expires June 7, 2020		       [Page 74]
  4145
  4146	Internet-Draft		       LPWAN SCHC		   December 2019
  4147
  4148
  4149		  --->* ABORT
  4150
  4151		  In any state
  4152		     on receiving a SCHC ACK REQ
  4153			Send a SCHC ACK for the current window
  4154
  4155
  4156		 Figure 40: Receiver State Machine for the ACK-Always Mode
  4157
  4158			  +=======+
  4159			  |	  |
  4160			  | INIT  |
  4161			  |	  |	  FCN!=0 & more frags
  4162			  +======++	  ~~~~~~~~~~~~~~~~~~~~~~
  4163	     Frag RuleID trigger |   +--+ Send cur_W + frag(FCN);
  4164	     ~~~~~~~~~~~~~~~~~~~ |   |	| FCN--;
  4165	  cur_W=0; FCN=max_value;|   |	| set [cur_W, cur_Bmp]
  4166	    clear [cur_W, Bmp_n];|   |	v
  4167		  clear rcv_Bmp  |  ++==+==========+	     **BACK_TO_SEND
  4168				 +->+		   |	 cur_W==rcv_W &
  4169	      **BACK_TO_SEND	    |	  SEND	   |	 [cur_W,Bmp_n]==rcv_Bmp
  4170	+-------------------------->+		   |	 & more frags
  4171	|  +----------------------->+		   |	 ~~~~~~~~~~~~
  4172	|  |			    ++===+=========+	 cur_W++;
  4173	|  |	  FCN==0 & more frags|	 |last frag	 clear [cur_W, Bmp_n]
  4174	|  |  ~~~~~~~~~~~~~~~~~~~~~~~|	 |~~~~~~~~~
  4175	|  |	    set cur_Bmp;     |	 |set [cur_W, Bmp_n];
  4176	|  |send cur_W + frag(All-0);|	 |send cur_W + frag(All-1)+RCS;
  4177	|  |	    set Retrans_Timer|	 |set Retrans_Timer
  4178	|  |			     |	 | +-----------------------------------+
  4179	|  |Retrans_Timer expires &  |	 | |cur_W==rcv_W&[cur_W,Bmp_n]!=rcv_Bmp|
  4180	|  |more Frags		     |	 | |  ~~~~~~~~~~~~~~~~~~~	       |
  4181	|  |~~~~~~~~~~~~~~~~~~~~     |	 | |  Attempts++; W=cur_W	       |
  4182	|  |stop Retrans_Timer;      |	 | | +--------+ 	    rcv_W==Wn &|
  4183	|  |[cur_W,Bmp_n]==cur_Bmp;  v	 v | |	      v     [Wn,Bmp_n]!=rcv_Bmp|
  4184	|  |cur_W++	       +=====+===+=+=+==+   +=+=========+   ~~~~~~~~~~~|
  4185	|  +-------------------+		|   | Resend	|   Attempts++;|
  4186	+----------------------+   Wait x ACK	|   | Missing	|	  W=Wn |
  4187	+--------------------->+		|   | Frags(W)	+<-------------+
  4188	|	  rcv_W==Wn &+-+		|   +======+====+
  4189	| [Wn,Bmp_n]!=rcv_Bmp| ++=+===+===+==+==+	   |
  4190	|      ~~~~~~~~~~~~~~|	^ |   |   |  ^		   |
  4191	|	 send (cur_W,+--+ |   |   |  +-------------+
  4192	|	 ALL-0-empty)	  |   |   |	all missing frag sent(W)
  4193	|			  |   |   |	~~~~~~~~~~~~~~~~~
  4194	|  Retrans_Timer expires &|   |   |	set Retrans_Timer
  4195	|	     No more Frags|   |   |
  4196	|	    ~~~~~~~~~~~~~~|   |   |
  4197
  4198
  4199
  4200	Minaburo, et al.	  Expires June 7, 2020		       [Page 75]
  4201
  4202	Internet-Draft		       LPWAN SCHC		   December 2019
  4203
  4204
  4205	|      stop Retrans_Timer;|   |   |
  4206	|(re)send frag(All-1)+RCS |   |   |
  4207	+-------------------------+   |   |
  4208			 cur_W==rcv_W&|   |
  4209	       [cur_W,Bmp_n]==rcv_Bmp&|   | Attempts > MAX_ACK_REQUESTS
  4210	  No more Frags & RCS flag==OK|   | ~~~~~~~~~~
  4211		    ~~~~~~~~~~~~~~~~~~|   | send Abort
  4212	 +=========+stop Retrans_Timer|   |  +===========+
  4213	 |   END   +<-----------------+   +->+	 ERROR	 |
  4214	 +=========+			     +===========+
  4215
  4216		 Figure 41: Sender State Machine for the ACK-on-Error Mode
  4217
  4218	   This is an example only.  It is not normative.  The specification in
  4219	   Section 8.4.3.1 allows for sequences of operations different from the
  4220	   one shown here.
  4221
  4222
  4223
  4224
  4225
  4226
  4227
  4228
  4229
  4230
  4231
  4232
  4233
  4234
  4235
  4236
  4237
  4238
  4239
  4240
  4241
  4242
  4243
  4244
  4245
  4246
  4247
  4248
  4249
  4250
  4251
  4252
  4253
  4254
  4255
  4256	Minaburo, et al.	  Expires June 7, 2020		       [Page 76]
  4257
  4258	Internet-Draft		       LPWAN SCHC		   December 2019
  4259
  4260
  4261			   +=======+	    New frag RuleID received
  4262			   |	   |	    ~~~~~~~~~~~~~
  4263			   | INIT  +-------+cur_W=0;clear([cur_W,Bmp_n]);
  4264			   +=======+	   |sync=0
  4265					   |
  4266	      Not All* & rcv_W==cur_W+---+ | +---+
  4267		~~~~~~~~~~~~~~~~~~~~ |	 | | |	(E)
  4268		set[cur_W,Bmp_n(FCN)]|	 v v v	 |
  4269				    ++===+=+=+===+=+
  4270	     +----------------------+		   +--+ All-0&Full[cur_W,Bmp_n]
  4271	     |		 ABORT *<---+  Rcv Window  |  | ~~~~~~~~~~
  4272	     |	+-------------------+		   +<-+ cur_W++;set Inact_timer;
  4273	     |	|		 +->+=+=+=+=+=+====+	clear [cur_W,Bmp_n]
  4274	     |	| All-0 empty(Wn)|    | | | ^ ^
  4275	     |	| ~~~~~~~~~~~~~~ +----+ | | | |rcv_W==cur_W & sync==0;
  4276	     |	| sendACK([Wn,Bmp_n])	| | | |& Full([cur_W,Bmp_n])
  4277	     |	|			| | | |& All* || last_miss_frag
  4278	     |	|			| | | |~~~~~~~~~~~~~~~~~~~~~~
  4279	     |	|    All* & rcv_W==cur_W|(C)| |sendACK([cur_W,Bmp_n]);
  4280	     |	|	       & sync==0| | | |cur_W++; clear([cur_W,Bmp_n])
  4281	     |	|&no_full([cur_W,Bmp_n])| |(E)|
  4282	     |	|      ~~~~~~~~~~~~~~~~ | | | | 	     +========+
  4283	     |	| sendACK([cur_W,Bmp_n])| | | | 	     | Error/ |
  4284	     |	|			| | | |   +----+     | Abort  |
  4285	     |	|			v v | |   |    |     +===+====+
  4286	     |	|		    +===+=+=+=+===+=+ (D)	 ^
  4287	     |	|		 +--+	 Wait x     |  |	 |
  4288	     |	| All-0 empty(Wn)+->| Missing Frags |<-+	 |
  4289	     |	| ~~~~~~~~~~~~~~    +=============+=+		 |
  4290	     |	| sendACK([Wn,Bmp_n])		  +--------------+
  4291	     |	|					*ABORT
  4292	     v	v
  4293	    (A)(B)
  4294					      (D) All* || last_miss_frag
  4295	      (C) All* & sync>0 		  & rcv_W!=cur_W & sync>0
  4296		  ~~~~~~~~~~~~			  & Full([rcv_W,Bmp_n])
  4297		  Wn=oldest[not full(W)];	  ~~~~~~~~~~~~~~~~~~~~
  4298		  sendACK([Wn,Bmp_n])		  Wn=oldest[not full(W)];
  4299						  sendACK([Wn,Bmp_n]);sync--
  4300
  4301					ABORT-->* Uplink Only &
  4302						  Inact_Timer expires
  4303	      (E) Not All* & rcv_W!=cur_W	  || Attempts > MAX_ACK_REQUESTS
  4304		  ~~~~~~~~~~~~~~~~~~~~		  ~~~~~~~~~~~~~~~~~~~~~
  4305		  sync++; cur_W=rcv_W;		  send Abort
  4306		  set[cur_W,Bmp_n(FCN)]
  4307
  4308
  4309
  4310
  4311
  4312	Minaburo, et al.	  Expires June 7, 2020		       [Page 77]
  4313
  4314	Internet-Draft		       LPWAN SCHC		   December 2019
  4315
  4316
  4317	     (A)(B)
  4318	      |  |
  4319	      |  | All-1 & rcv_W==cur_W & RCS!=OK	 All-0 empty(Wn)
  4320	      |  | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~     +-+  ~~~~~~~~~~
  4321	      |  | sendACK([cur_W,Bmp_n],C=0)	    | v  sendACK([Wn,Bmp_n])
  4322	      |  |			+===========+=++
  4323	      |  +--------------------->+   Wait End   +-+
  4324	      | 			+=====+=+====+=+ | All-1
  4325	      |     rcv_W==cur_W & RCS==OK    | |    ^	 | & rcv_W==cur_W
  4326	      |     ~~~~~~~~~~~~~~~~~~~~~~    | |    +---+ & RCS!=OK
  4327	      |  sendACK([cur_W,Bmp_n],C=1)   | |	   ~~~~~~~~~~~~~~~~~~~
  4328	      | 			      | | sendACK([cur_W,Bmp_n],C=0);
  4329	      | 			      | |	   Attempts++
  4330	      |All-1 & Full([cur_W,Bmp_n])    | |
  4331	      |& RCS==OK & sync==0	      | +-->* ABORT
  4332	      |~~~~~~~~~~~~~~~~~~~	      v
  4333	      |sendACK([cur_W,Bmp_n],C=1)   +=+=========+
  4334	      +---------------------------->+	 END	|
  4335					    +===========+
  4336
  4337
  4338
  4339		Figure 42: Receiver State Machine for the ACK-on-Error Mode
  4340
  4341	Appendix D.  SCHC Parameters
  4342
  4343	   This section lists the information that needs to be provided in the
  4344	   LPWAN technology-specific documents.
  4345
  4346	   o  Most common uses cases, deployment scenarios
  4347
  4348	   o  Mapping of the SCHC architectural elements onto the LPWAN
  4349	      architecture
  4350
  4351	   o  Assessment of LPWAN integrity checking
  4352
  4353	   o  Various potential channel conditions for the technology and the
  4354	      corresponding recommended use of SCHC C/D and F/R
  4355
  4356	   This section lists the parameters that need to be defined in the
  4357	   Profile.
  4358
  4359	   o  Rule ID numbering scheme, fixed-sized or variable-sized Rule IDs,
  4360	      number of Rules, the way the Rule ID is transmitted
  4361
  4362	   o  maximum packet size that should ever be reconstructed by SCHC
  4363	      Decompression (MAX_PACKET_SIZE).	See Section 12.
  4364
  4365
  4366
  4367
  4368	Minaburo, et al.	  Expires June 7, 2020		       [Page 78]
  4369
  4370	Internet-Draft		       LPWAN SCHC		   December 2019
  4371
  4372
  4373	   o  Padding: size of the L2 Word (for most LPWAN technologies, this
  4374	      would be a byte; for some technologies, a bit)
  4375
  4376	   o  Decision to use SCHC fragmentation mechanism or not.  If yes, the
  4377	      document must describe:
  4378
  4379	      *  reliability mode(s) used, in which cases (e.g., based on link
  4380		 channel condition)
  4381
  4382	      *  Rule ID values assigned to each mode in use
  4383
  4384	      *  presence and number of bits for DTag (T) for each Rule ID
  4385		 value, lifetime of DTag at the receiver
  4386
  4387	      *  support for interleaved packet transmission, to what extent
  4388
  4389	      *  WINDOW_SIZE, for modes that use windows
  4390
  4391	      *  number of bits for W (M) for each Rule ID value, for modes that
  4392		 use windows
  4393
  4394	      *  number of bits for FCN (N) for each Rule ID value
  4395
  4396	      *  what makes an All-0 SCHC Fragment and a SCHC ACK REQ
  4397		 distinguishable (see Section 8.3.1.1).
  4398
  4399	      *  what makes an All-1 SCHC Fragment and a SCHC Sender-Abort
  4400		 distinguishable (see Section 8.3.1.2).
  4401
  4402	      *  size of RCS and algorithm for its computation, for each Rule
  4403		 ID, if different from the default CRC32.  Byte fill-up with
  4404		 zeroes or other mechanism, to be specified.
  4405
  4406	      *  Retransmission Timer duration for each Rule ID value, if
  4407		 applicable to the SCHC F/R mode
  4408
  4409	      *  Inactivity Timer duration for each Rule ID value, if applicable
  4410		 to the SCHC F/R mode
  4411
  4412	      *  MAX_ACK_REQUESTS value for each Rule ID value, if applicable to
  4413		 the SCHC F/R mode
  4414
  4415	   o  if L2 Word is wider than a bit and SCHC fragmentation is used,
  4416	      value of the padding bits (0 or 1).  This is needed because the
  4417	      padding bits of the last fragment are included in the RCS
  4418	      computation.
  4419
  4420
  4421
  4422
  4423
  4424	Minaburo, et al.	  Expires June 7, 2020		       [Page 79]
  4425
  4426	Internet-Draft		       LPWAN SCHC		   December 2019
  4427
  4428
  4429	   A Profile may define a delay to be added after each SCHC message
  4430	   transmission for compliance with local regulations or other
  4431	   constraints imposed by the applications.
  4432
  4433	   o  In some LPWAN technologies, as part of energy-saving techniques,
  4434	      downlink transmission is only possible immediately after an uplink
  4435	      transmission.  In order to avoid potentially high delay in the
  4436	      downlink transmission of a fragmented SCHC Packet, the SCHC
  4437	      Fragment receiver may perform an uplink transmission as soon as
  4438	      possible after reception of a SCHC Fragment that is not the last
  4439	      one.  Such uplink transmission may be triggered by the L2 (e.g.,
  4440	      an L2 ACK sent in response to a SCHC Fragment encapsulated in a L2
  4441	      PDU that requires an L2 ACK) or it may be triggered from an upper
  4442	      layer.  See Appendix F.
  4443
  4444	   o  the following parameters need to be addressed in documents other
  4445	      than this one but not necessarily in the LPWAN technology-specific
  4446	      documents:
  4447
  4448	      *  The way the Contexts are provisioned
  4449
  4450	      *  The way the Rules are generated
  4451
  4452	Appendix E.  Supporting multiple window sizes for fragmentation
  4453
  4454	   For ACK-Always or ACK-on-Error, implementers may opt to support a
  4455	   single window size or multiple window sizes.  The latter, when
  4456	   feasible, may provide performance optimizations.  For example, a
  4457	   large window size should be used for packets that need to be split
  4458	   into a large number of tiles.  However, when the number of tiles
  4459	   required to carry a packet is low, a smaller window size, and thus a
  4460	   shorter Bitmap, may be sufficient to provide reception status on all
  4461	   tiles.  If multiple window sizes are supported, the Rule ID signals
  4462	   the window size in use for a specific packet transmission.
  4463
  4464	Appendix F.  ACK-Always and ACK-on-Error on quasi-bidirectional links
  4465
  4466	   The ACK-Always and ACK-on-Error modes of SCHC F/R are bidirectional
  4467	   protocols: they require a feedback path from the reassembler to the
  4468	   fragmenter.
  4469
  4470	   Some LPWAN technologies provide quasi-bidirectional connectivity,
  4471	   whereby a downlink transmission from the Network Infrastructure can
  4472	   only take place right after an uplink transmission by the Dev.
  4473
  4474	   When using SCHC F/R to send fragmented SCHC Packets downlink over
  4475	   these quasi-bidirectional links, the following situation may arise:
  4476	   if an uplink SCHC ACK is lost, the SCHC ACK REQ message by the sender
  4477
  4478
  4479
  4480	Minaburo, et al.	  Expires June 7, 2020		       [Page 80]
  4481
  4482	Internet-Draft		       LPWAN SCHC		   December 2019
  4483
  4484
  4485	   could be stuck indefinitely in the downlink queue at the Network
  4486	   Infrastructure, waiting for a transmission opportunity.
  4487
  4488	   There are many ways by which this deadlock can be avoided.  The Dev
  4489	   application might be sending recurring uplink messages such as keep-
  4490	   alive, or the Dev application stack might be sending other recurring
  4491	   uplink messages as part of its operation.  However, these are out of
  4492	   the control of this generic SCHC specification.
  4493
  4494	   In order to cope with quasi-bidirectional links, a SCHC-over-foo
  4495	   specification may want to amend the SCHC F/R specification to add a
  4496	   timer-based retransmission of the SCHC ACK.	Below is an example of
  4497	   the suggested behavior for ACK-Always mode.	Because it is an
  4498	   example, [RFC2119] language is deliberately not used here.
  4499
  4500	   For downlink transmission of a fragmented SCHC Packet in ACK-Always
  4501	   mode, the SCHC Fragment receiver may support timer-based SCHC ACK
  4502	   retransmission.  In this mechanism, the SCHC Fragment receiver
  4503	   initializes and starts a timer (the UplinkACK Timer) after the
  4504	   transmission of a SCHC ACK, except when the SCHC ACK is sent in
  4505	   response to the last SCHC Fragment of a packet (All-1 fragment).  In
  4506	   the latter case, the SCHC Fragment receiver does not start a timer
  4507	   after transmission of the SCHC ACK.
  4508
  4509	   If, after transmission of a SCHC ACK that is not an All-1 fragment,
  4510	   and before expiration of the corresponding UplinkACK timer, the SCHC
  4511	   Fragment receiver receives a SCHC Fragment that belongs to the
  4512	   current window (e.g., a missing SCHC Fragment from the current
  4513	   window) or to the next window, the UplinkACK timer for the SCHC ACK
  4514	   is stopped.	However, if the UplinkACK timer expires, the SCHC ACK is
  4515	   resent and the UplinkACK timer is reinitialized and restarted.
  4516
  4517	   The default initial value for the UplinkACK Timer, as well as the
  4518	   maximum number of retries for a specific SCHC ACK, denoted
  4519	   MAX_ACK_REQUESTS, is to be defined in a Profile.  The initial value
  4520	   of the UplinkACK timer is expected to be greater than that of the
  4521	   Retransmission timer, in order to make sure that a (buffered) SCHC
  4522	   Fragment to be retransmitted finds an opportunity for that
  4523	   transmission.  One exception to this recommendation is the special
  4524	   case of the All-1 SCHC Fragment transmission.
  4525
  4526	   When the SCHC Fragment sender transmits the All-1 SCHC Fragment, it
  4527	   starts its Retransmission Timer with a large timeout value (e.g.,
  4528	   several times that of the initial UplinkACK Timer).	If a SCHC ACK is
  4529	   received before expiration of this timer, the SCHC Fragment sender
  4530	   retransmits any lost SCHC Fragments as reported by the SCHC ACK, or
  4531	   if the SCHC ACK confirms successful reception of all SCHC Fragments
  4532	   of the last window, the transmission of the fragmented SCHC Packet is
  4533
  4534
  4535
  4536	Minaburo, et al.	  Expires June 7, 2020		       [Page 81]
  4537
  4538	Internet-Draft		       LPWAN SCHC		   December 2019
  4539
  4540
  4541	   considered complete.  If the timer expires, and no SCHC ACK has been
  4542	   received since the start of the timer, the SCHC Fragment sender
  4543	   assumes that the All-1 SCHC Fragment has been successfully received
  4544	   (and possibly, the last SCHC ACK has been lost: this mechanism
  4545	   assumes that the Retransmission Timer for the All-1 SCHC Fragment is
  4546	   long enough to allow several SCHC ACK retries if the All-1 SCHC
  4547	   Fragment has not been received by the SCHC Fragment receiver, and it
  4548	   also assumes that it is unlikely that several ACKs become all lost).
  4549
  4550	Authors' Addresses
  4551
  4552	   Ana Minaburo
  4553	   Acklio
  4554	   1137A avenue des Champs Blancs
  4555	   35510 Cesson-Sevigne Cedex
  4556	   France
  4557
  4558	   Email: ana@ackl.io
  4559
  4560
  4561	   Laurent Toutain
  4562	   IMT-Atlantique
  4563	   2 rue de la Chataigneraie
  4564	   CS 17607
  4565	   35576 Cesson-Sevigne Cedex
  4566	   France
  4567
  4568	   Email: Laurent.Toutain@imt-atlantique.fr
  4569
  4570
  4571	   Carles Gomez
  4572	   Universitat Politecnica de Catalunya
  4573	   C/Esteve Terradas, 7
  4574	   08860 Castelldefels
  4575	   Spain
  4576
  4577	   Email: carlesgo@entel.upc.edu
  4578
  4579
  4580	   Dominique Barthel
  4581	   Orange Labs
  4582	   28 chemin du Vieux Chene
  4583	   38243 Meylan
  4584	   France
  4585
  4586	   Email: dominique.barthel@orange.com
  4587
  4588
  4589
  4590
  4591
  4592	Minaburo, et al.	  Expires June 7, 2020		       [Page 82]
  4593
  4594	Internet-Draft		       LPWAN SCHC		   December 2019
  4595
  4596
  4597	   Juan Carlos Zuniga
  4598	   SIGFOX
  4599	   425 rue Jean Rostand
  4600	   Labege  31670
  4601	   France
  4602
  4603	   Email: JuanCarlos.Zuniga@sigfox.com
  4604
  4605
  4606
  4607
  4608
  4609
  4610
  4611
  4612
  4613
  4614
  4615
  4616
  4617
  4618
  4619
  4620
  4621
  4622
  4623
  4624
  4625
  4626
  4627
  4628
  4629
  4630
  4631
  4632
  4633
  4634
  4635
  4636
  4637
  4638
  4639
  4640
  4641
  4642
  4643
  4644
  4645
  4646
  4647
  4648	Minaburo, et al.	  Expires June 7, 2020		       [Page 83]
